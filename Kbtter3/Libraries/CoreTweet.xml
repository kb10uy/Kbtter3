<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreTweet</name>
    </assembly>
    <members>
        <member name="T:CoreTweet.TwitterParameterAttribute">
            <summary>
            Twitter parameter attribute.
            </summary>
        </member>
        <member name="M:CoreTweet.TwitterParameterAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.TwitterParameterAttribute"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="P:CoreTweet.TwitterParameterAttribute.Name">
            <summary>
            Name of the parameter binding for.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CoreTweet.TwitterParameterAttribute.DefaultValue">
            <summary>
            Default value of the parameter.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:CoreTweet.TwitterParametersAttribute">
            <summary>
            Twitter parameters attribute.
            This is used for a class.
            </summary>
        </member>
        <member name="T:CoreTweet.ConnectionOptions">
            <summary>
            Properties for requesting.
            </summary>
        </member>
        <member name="M:CoreTweet.ConnectionOptions.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.Timeout">
            <summary>
            Gets or sets the time-out value in milliseconds.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.ReadWriteTimeout">
            <summary>
            Gets or sets a time-out in milliseconds when writing to or reading from a stream.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UserAgent">
            <summary>
            Gets or sets the value of the User-agent HTTP header.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.BeforeRequestAction">
            <summary>
            Gets or sets action which is called before sending request.
            </summary>
        </member>
        <member name="T:CoreTweet.ParsingException">
            <summary>
            Exception when parsing.
            </summary>
        </member>
        <member name="P:CoreTweet.ParsingException.Json">
            <summary>
            The JSON which causes an exception.
            </summary>
            <value>
            The json.
            </value>
        </member>
        <member name="T:CoreTweet.TwitterException">
            <summary>
            Exception throwed by Twitter.
            </summary>
        </member>
        <member name="M:CoreTweet.TwitterException.Create(System.Net.WebException)">
            <summary>
            Create a <see cref="T:CoreTweet.TwitterException"/> instance from the <see cref="T:System.Net.WebException"/>.
            </summary>
            <param name="ex">The thrown <see cref="T:System.Net.WebException"/>.</param>
            <returns><see cref="T:CoreTweet.TwitterException"/> instance or null.</returns>
        </member>
        <member name="P:CoreTweet.TwitterException.Status">
            <summary>
                The status of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.Errors">
            <summary>
                The error messages.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.ApiProviderBase">
            <summary>
            Base class of API providers.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ApiProviderBase.Tokens">
            <summary>
            Gets or sets the oauth tokens.
            </summary>
            <value>
            The tokens.
            </value>
        </member>
        <member name="P:CoreTweet.Core.ApiProviderBase.IncludedTokens">
            <summary>
            Gets the tokens being used in this instance.
            </summary>
            <value>
            The tokens.
            </value>
        </member>
        <member name="T:CoreTweet.Core.UriConverter">
            <summary>
            The Uri converter for the JsonSerializer.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.UriConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
            <param name='type'>
            If set to <c>true</c> type.
            </param>
        </member>
        <member name="M:CoreTweet.Core.UriConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads and parses the json.
            </summary>
            <returns>
            The json.
            </returns>
            <param name='jr'>
            The instance of JsonReader.
            </param>
            <param name='_'>
            Unused.
            </param>
            <param name='__'>
            Unused.
            </param>
            <param name='___'>
            Unused.
            </param>
        </member>
        <member name="M:CoreTweet.Core.UriConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the object to the json.
            </summary>
            <param name='jw'>
            The instance of JsonReader.
            </param>
            <param name='value'>
            The object you want to serialize.
            </param>
            <param name='_'>
            Unused.
            </param>
        </member>
        <member name="T:CoreTweet.Core.DateTimeOffsetConverter">
            <summary>
            The DateTimeOffset converter for the JsonSerializer.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified type.
            </summary>
            <returns>
            <c>true</c> if this instance can convert the specified type; otherwise, <c>false</c>.
            </returns>
            <param name='type'>
            If set to <c>true</c> type.
            </param>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads and parses the json.
            </summary>
            <returns>
            The json.
            </returns>
            <param name='jr'>
            The instance of JsonReader.
            </param>
            <param name='_'>
            Unused.
            </param>
            <param name='__'>
            Unused.
            </param>
            <param name='___'>
            Unused.
            </param>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the object to the json.
            </summary>
            <param name='jw'>
            The instance of JsonReader.
            </param>
            <param name='value'>
            The object you want to serialize.
            </param>
            <param name='_'>
            Unused.
            </param>
        </member>
        <member name="T:CoreTweet.Core.CoreBase">
            <summary>
            The base class of twitter objects.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.Convert``1(CoreTweet.Core.TokensBase,System.String,System.String)">
            <summary>
            Convert the json to a twitter object of the specified type.
            </summary>
            <remarks>
            This method is used internally in CoreTweet.
            You can use this method for debugging.
            </remarks>
            <param name='tokens'>
            OAuth tokens.
            </param>
            <param name='json'>
            The json message.
            </param>
            <param name="jsonPath">
            JSONPath of object to be deserialize.
            </param>
            <typeparam name='T'>
            The type of a twitter object.
            </typeparam>
            <returns>
            The twitter object.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.ConvertBase``1(CoreTweet.Core.TokensBase,System.String,System.String)">
            <summary>
            Convert the json to a twitter object of the specified type.
            </summary>
            <remarks>
            This method is used internally in CoreTweet.
            You can use this method for debugging.
            </remarks>
            <param name='tokens'>
            OAuth tokens.
            </param>
            <param name='json'>
            The json message.
            </param>
            <param name="jsonPath">
            JSONPath of object to be deserialize.
            </param>
            <typeparam name='T'>
            The type of a twitter object.
            </typeparam>
            <returns>
            The twitter object.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.ConvertArray``1(CoreTweet.Core.TokensBase,System.String,System.String)">
            <summary>
            Convert the json to a twitter object of the specified type.
            This is used for APIs that return an array.
            </summary>
            <remarks>
            This method is used internally in CoreTweet.
            You can use this method for debugging.
            </remarks>
            <param name='tokens'>
            OAuth tokens.
            </param>
            <param name='json'>
            The json message.
            </param>
            <param name="jsonPath">
            JSONPath of object to be deserialize.
            </param>
            <typeparam name='T'>
            The type of a twitter object.
            </typeparam>
            <returns>
            Twitter objects.
            </returns>
        </member>
        <member name="T:CoreTweet.Core.TokensBase">
            <summary>
            The OAuth tokens
            </summary>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='type'>
            Type of HTTP request.
            </param>
            <param name='url'>
            URL.
            </param>
            <param name="cancellationToken">
            Cancellation token.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync``1(CoreTweet.MethodType,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='type'>
            Type of HTTP request.
            </param>
            <param name='url'>
            URL.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
            <param name="cancellationToken">
            Cancellation token.
            </param>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='type'>
            Type of HTTP request.
            </param>
            <param name='url'>
            URL.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
            <param name="cancellationToken">
            Cancellation token.
            </param>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.CreateAuthorizationHeader(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            When overridden in a descendant class, creates string for Authorization header.
            </summary>
            <param name="type">Type of HTTP request.</param>
            <param name="url">URL.</param>
            <param name="parameters">Parameters.</param>
            <returns>String for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='type'>
            Type of HTTP request.
            </param>
            <param name='url'>
            URL.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest``1(CoreTweet.MethodType,System.String,``0)">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='type'>
            Type of HTTP request.
            </param>
            <param name='url'>
            URL.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <returns>
            The stream.
            </returns>
            <param name='type'>
            Type of HTTP request.
            </param>
            <param name='url'>
            URL.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConsumerKey">
            <summary>
            The consumer key.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConsumerSecret">
            <summary>
            The consumer secret.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Account">
            <summary>
            Rest/Account
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Blocks">
            <summary>
            Rest/Blocks
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.DirectMessages">
            <summary>
            Rest/Direct messages.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Favorites">
            <summary>
            Rest/Favorites.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Friends">
            <summary>
            Rest/Friends.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Followers">
            <summary>
            Rest/Followers
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Friendships">
            <summary>
            Rest/Friendships.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Geo">
            <summary>
            Rest/Geo.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Help">
            <summary>
            Rest/Help.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Lists">
            <summary>
            Rest/Lists.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Search">
            <summary>
            Rest/Search.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.SavedSearches">
            <summary>
            Rest/Saved searches.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Statuses">
            <summary>
            Rest/Statuses.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Trends">
            <summary>
            Rest/Trends.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Users">
            <summary>
            Rest/Users.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Mutes">
            <summary>
            Rest/Mutes.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Streaming">
            <summary>
            Streaming API.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConnectionOptions">
            <summary>
            Gets or sets options of connection.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.ResolveObject``1(``0,System.Reflection.BindingFlags)">
            <summary>
            Object to Dictionary
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AnnoToDictionary``1(``0)">
            <summary>
            Anonymous type object to Dictionary
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.GetExpressionValue(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}})">
            <summary>
            Gets the expression value.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.ExpressionsToDictionary(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}})">
            <summary>
            Expressions to dictionary.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.GetUrl(System.String)">
            <summary>
            Gets the url of the specified api's name.
            </summary>
            <returns>The url.</returns>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AccessParameterReservedApi``1(CoreTweet.Core.TokensBase,CoreTweet.MethodType,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            id, slug, etc
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AccessParameterReservedApiArray``1(CoreTweet.Core.TokensBase,CoreTweet.MethodType,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            id, slug, etc
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AccessParameterReservedApiAsync``1(CoreTweet.Core.TokensBase,CoreTweet.MethodType,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            id, slug, etc
            </summary>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AccessParameterReservedApiArrayAsync``1(CoreTweet.Core.TokensBase,CoreTweet.MethodType,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            id, slug, etc
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth.AuthorizeAsync(System.String,System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
                Generates the authorize URI.
                Then call GetTokens(string) after get the pin code.
            </summary>
            <returns>
                The authorize URI.
            </returns>
            <param name="consumerKey">
                Consumer key.
            </param>
            <param name="consumerSecret">
                Consumer secret.
            </param>
            <param name="oauthCallback">
                <para>For OAuth 1.0a compliance this parameter is required. The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account. Set this to oob for out-of-band pin mode. This is also how you specify custom callbacks for use in desktop/mobile applications.</para>
                <para>Always send an oauth_callback on this step, regardless of a pre-registered callback.</para>
            </param>
            <param name="proxy">
                Proxy information for the request.
            </param>
            <param name="cancellationToken">
                Cancellation token.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.OAuth.GetTokensAsync(CoreTweet.OAuth.OAuthSession,System.String,System.Threading.CancellationToken)" で無視されました -->
        <member name="F:CoreTweet.OAuth.RequestTokenUrl">
            <summary>
            The request token URL.
            </summary>
        </member>
        <member name="F:CoreTweet.OAuth.AccessTokenUrl">
            <summary>
            The access token URL.
            </summary>
        </member>
        <member name="F:CoreTweet.OAuth.AuthorizeUrl">
            <summary>
            The authorize URL.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth.Authorize(System.String,System.String,System.String,CoreTweet.ConnectionOptions)">
            <summary>
                Generates the authorize URI.
                Then call GetTokens(string) after get the pin code.
            </summary>
            <returns>
                The authorize URI.
            </returns>
            <param name="consumerKey">
                Consumer key.
            </param>
            <param name="consumerSecret">
                Consumer secret.
            </param>
            <param name="oauthCallback">
                <para>For OAuth 1.0a compliance this parameter is required. The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account. Set this to oob for out-of-band pin mode. This is also how you specify custom callbacks for use in desktop/mobile applications.</para>
                <para>Always send an oauth_callback on this step, regardless of a pre-registered callback.</para>
            </param>
            <param name="proxy">
                Proxy information for the request.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.OAuth.GetTokens(CoreTweet.OAuth.OAuthSession,System.String)" で無視されました -->
        <member name="P:CoreTweet.OAuth.OAuthSession.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
            <value>The consumer key.</value>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
            <value>The consumer secret.</value>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.RequestToken">
            <summary>
            Gets or sets the request token.
            </summary>
            <value>The request token.</value>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.RequestTokenSecret">
            <summary>
            Gets or sets the request token secret.
            </summary>
            <value>The request token secret.</value>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConnectionOptions">
            <summary>
            Gets or sets the options of connection.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.AuthorizeUri">
            <summary>
            Gets the authorize URL.
            </summary>
            <value>The authorize URL.</value>
        </member>
        <member name="M:CoreTweet.OAuth2.GetTokenAsync(System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the OAuth 2 Bearer Token.
            </summary>
            <param name="consumerKey">Consumer key.</param>
            <param name="consumerSecret">Consumer secret.</param>
            <param name="proxy">Proxy information for the request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2.InvalidateTokenAsync(CoreTweet.OAuth2Token,System.Threading.CancellationToken)">
            <summary>
            Invalidates the OAuth 2 Bearer Token.
            </summary>
            <param name="tokens">An instance of OAuth2Tokens.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The invalidated token.</returns>
        </member>
        <member name="F:CoreTweet.OAuth2.AccessTokenUrl">
            <summary>
            The access token URL.
            </summary>
        </member>
        <member name="F:CoreTweet.OAuth2.InvalidateTokenUrl">
            <summary>
            The URL to revoke a OAuth2 Bearer Token.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2.GetToken(System.String,System.String,CoreTweet.ConnectionOptions)">
            <summary>
            Gets the OAuth 2 Bearer Token.
            </summary>
            <param name="consumerKey">Consumer key.</param>
            <param name="consumerSecret">Consumer secret.</param>
            <param name="proxy">Proxy information for the request.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2.InvalidateToken(CoreTweet.OAuth2Token)">
            <summary>
            Invalidates the OAuth 2 Bearer Token.
            </summary>
            <param name="tokens">An instance of OAuth2Tokens.</param>
            <returns>The invalidated token.</returns>
        </member>
        <member name="T:CoreTweet.Cursored`1">
            <summary>
            The cursored message object.
            </summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Cursored`1.GetEnumerator" で無視されました -->
        <member name="P:CoreTweet.Cursored`1.Result">
            <summary>
            Results.
            </summary>
            <value>Result.</value>
        </member>
        <member name="P:CoreTweet.Cursored`1.NextCursor">
            <summary>
            The next cursor.
            </summary>
            <value>The next cursor.</value>
        </member>
        <member name="P:CoreTweet.Cursored`1.PreviousCursor">
            <summary>
            The previous cursor.
            </summary>
            <value>The previous cursor.</value>
        </member>
        <member name="P:CoreTweet.Embed.Html">
            <summary>
            The html code that can be embedded.
            </summary>
            <value>
            The html.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.AuthorName">
            <summary>
            The name of the author.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.AuthorUrl">
            <summary>
            The URL of the author.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.ProviderUrl">
            <summary>
            The URL of ther provider.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.ProviderName">
            <summary>
            The name of the provider.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.Url">
            <summary>
            The URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.Version">
            <summary>
            The version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.Type">
            <summary>
            The type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.Height">
            <summary>
            The height of the embed object.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.Width">
            <summary>
            The width of the embed object.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:CoreTweet.Embed.CacheAge">
            <summary>
            The age of the cache.
            </summary>
            <value>
            The age.
            </value>
        </member>
        <member name="P:CoreTweet.Entity.HashTags">
            <summary>
                Represents hashtags which have been parsed out of the Tweet text.
            </summary>
        </member>
        <member name="P:CoreTweet.Entity.Media">
            <summary>
                Represents media elements uploaded with the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Entity.Urls">
            <summary>
                Represents URLs included in the text of a Tweet or within textual fields of a user object.
            </summary>
        </member>
        <member name="P:CoreTweet.Entity.UserMentions">
            <summary>
                Represents other Twitter users mentioned in the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.HashTag.Text">
            <summary>
                Name of the hashtag, minus the leading '#' character.
            </summary>
        </member>
        <member name="P:CoreTweet.HashTag.Indices">
            <summary>
                An array of integers indicating the offsets within the Tweet text where the hashtag begins and ends. The first integer represents the location of the # character in the Tweet text string. The second integer represents the location of the first character after the hashtag. Therefore the difference between the two numbers will be the length of the hashtag name plus one (for the '#' character).
            </summary>
        </member>
        <member name="P:CoreTweet.Media.DisplayUrl">
            <summary>
                URL of the media to display to clients.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.ExpandedUrl">
            <summary>
                An expanded version of display_url. Links to the media display page.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.Id">
            <summary>
                ID of the media expressed as a 64-bit integer.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.Indices">
            <summary>
                An array of integers indicating the offsets within the Tweet text where the URL begins and ends. The first integer represents the location of the first character of the URL in the Tweet text. The second integer represents the location of the first non-URL character occurring after the URL (or the end of the string if the URL is the last part of the Tweet text).
            </summary>
        </member>
        <member name="P:CoreTweet.Media.MediaUrl">
            <summary>
                An http:// URL pointing directly to the uploaded media file.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.MediaUrlHttps">
            <summary>
                An https:// URL pointing directly to the uploaded media file, for embedding on https pages.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.Sizes">
            <summary>
                An object showing available sizes for the media file.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.SourceStatusId">
            <summary>
                For Tweets containing media that was originally associated with a different tweet, this ID points to the original Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.Type">
            <summary>
                Type of uploaded media.
            </summary>
        </member>
        <member name="P:CoreTweet.Media.Url">
            <summary>
                Wrapped URL for the media link. This corresponds with the URL embedded directly into the raw Tweet text, and the values for the indices parameter.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Height">
            <summary>
                Height in pixels of this size.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Resize">
            <summary>
                Resizing method used to obtain this size. A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio. A value of crop means that the media was cropped in order to fit a specific resolution.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Width">
            <summary>
                Width in pixels of this size.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Large">
            <summary>
                Information for a large-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Medium">
            <summary>
                Information for a medium-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Small">
            <summary>
                Information for a small-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Thumb">
            <summary>
                Information for a thumbnail-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.Url.DisplayUrl">
            <summary>
                Version of the URL to display to clients.
            </summary>
        </member>
        <member name="P:CoreTweet.Url.ExpandedUrl">
            <summary>
                Expanded version of display_url.
            </summary>
        </member>
        <member name="P:CoreTweet.Url.Indices">
            <summary>
                An array of integers representing offsets within the Tweet text where the URL begins and ends. The first integer represents the location of the first character of the URL in the Tweet text. The second integer represents the location of the first non-URL character after the end of the URL.
            </summary>
        </member>
        <member name="P:CoreTweet.Url.Uri">
            <summary>
                Wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the values for the indices parameter.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMention.Id">
            <summary>
                ID of the mentioned user, as an integer.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMention.Indices">
            <summary>
                An array of integers representing the offsets within the Tweet text where the user reference begins and ends. The first integer represents the location of the '@' character of the user mention. The second integer represents the location of the first non-screenname character following the user mention.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMention.Name">
            <summary>
                Display name of the referenced user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMention.ScreenName">
            <summary>
                Screen name of the referenced user.
            </summary>
        </member>
        <member name="P:CoreTweet.Error.Code">
            <summary>
                The machine-parseable code.
                While the text for an error message may change, the codes will stay the same.
            </summary>
        </member>
        <member name="P:CoreTweet.Error.Message">
            <summary>
                The error message.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.CharactersReservedPerMedia">
            <summary>
            Count of the characters that is reserved for a media.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:CoreTweet.Configurations.MaxMediaPerUpload">
            <summary>
            Limit of the count of medias that can be uploaded at once.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:CoreTweet.Configurations.NonUsernamePaths">
            <summary>
            Paths in twitter.com/ that is not an username.
            They are used for pages of Twitter.
            </summary>
            <value>
            The non-username paths.
            </value>
        </member>
        <member name="P:CoreTweet.Configurations.PhotoSizeLimit">
            <summary>
            Limit of the size of media that can be uploaded.
            </summary>
            <value>
            The limit value.
            </value>
        </member>
        <member name="P:CoreTweet.Configurations.ShortUrlLength">
            <summary>
            Length of the shorten URL.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:CoreTweet.Configurations.ShortUrlLengthHttps">
            <summary>
            Length of the shorten URL that uses SSL.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:CoreTweet.Configurations.PhotoSizes">
            <summary>
            Sizes of a photo.
            </summary>
            <value>
            Sizes.
            </value>
        </member>
        <member name="P:CoreTweet.Language.Code">
            <summary>
            The language code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="P:CoreTweet.Language.Name">
            <summary>
            Name of the language.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CoreTweet.Language.Status">
            <summary>
            Status of the language.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:CoreTweet.StringResponse.Value">
            <summary>
            Value of response.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Slug">
            <summary>
                The string that become unique representation by combining an owner_id or owner_screen_name.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Name">
            <summary>
                The name of thi List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.CreatedAt">
            <summary>
                Time when this List was created.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Uri">
            <summary>
                Uri of this List. Usage: string.Format("https://twitter.com{0}", uri)
            </summary>
        </member>
        <member name="P:CoreTweet.List.SubscriberCount">
            <summary>
                Number of users following this List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.MemberCount">
            <summary>
                Number of members in this List .
            </summary>
        </member>
        <member name="P:CoreTweet.List.Id">
            <summary>
                The integer representation of the unique identifier for this List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Mode">
            <summary>
                Indicates whether this List has been published by the owner.
            </summary>
        </member>
        <member name="P:CoreTweet.List.FullName">
            <summary>
                The full name of this List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Description">
            <summary>
                Nullable. The user-defined UTF-8 string describing this List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.User">
            <summary>
                The user of this List's owner. 
            </summary>
        </member>
        <member name="P:CoreTweet.List.IsFollowing">
            <summary>
                Indicates whether this List has been followed by the authenticating user.
            </summary>
        </member>
        <member name="T:CoreTweet.OAuth2Token">
            <summary>
            The OAuth2 token, which is usually used for Application-only authentication.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2Token.CreateAuthorizationHeader(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates string for Authorization header including bearer token.
            </summary>
            <param name="type">Type of HTTP request.</param>
            <param name="url">URL.</param>
            <param name="parameters">Parameters.</param>
            <returns>String for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2Token.Create(System.String,System.String,System.String)">
            <summary>
            Make an instance of OAuth2Tokens.
            </summary>
            <param name="consumerKey">Consumer key.</param>
            <param name="consumerSecret">Consumer secret.</param>
            <param name="bearer">Bearer token</param>
        </member>
        <member name="P:CoreTweet.OAuth2Token.BearerToken">
            <summary>
            The access token.
            </summary>
        </member>
        <member name="T:CoreTweet.Place">
            <summary>
            Places are specific, named locations with corresponding geo coordinates. 
            They can be attached to Tweets by specifying a place_id when tweeting. 
            Tweets associated with places are not necessarily issued from that location but could also potentially be about that location. 
            Places can be searched for. Tweets can also be found by place_id. 
            See About Geo Place Attributes for more information.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Attributes">
            <summary>
                Contains a hash of variant information about the place. 
            </summary>
            <see cref="!:https://dev.twitter.com/docs/about-geo-place-attributes"/>
        </member>
        <member name="P:CoreTweet.Place.BoundingBox">
            <summary>
                A bounding box of coordinates which encloses this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Country">
            <summary>
                Name of the country containing this place.The country.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.CountryCode">
            <summary>
                Shortened country code representing the country containing this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.FullName">
            <summary>
                Full human-readable representation of the place's name.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Id">
            <summary>
                ID representing this place. Note that this is represented as a string, not an integer.
                In trends/avaliable or trends/closest, ID is a Yahoo! Where On Earth ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Name">
            <summary>
                Short human-readable representation of the place's name.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.PlaceType">
            <summary>
                The type of location represented by this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Url">
            <summary>
                URL representing the location of additional place metadata for this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.ContainedWithin">
            <summary>
                The array of Places contained within this Place.
            </summary>
        </member>
        <member name="T:CoreTweet.BoundingBox">
            <summary>
            Bounding box.
            This class can easily be converted to a JSON with JsonConvert.SerializeObject.
            </summary>
        </member>
        <member name="P:CoreTweet.BoundingBox.Coordinates">
            <summary>
            A series of longitude and latitude points, defining a box which will contain the Place entity this bounding box is related to. Each point is an array in the form of [longitude, latitude]. Points are grouped into an array per bounding box. Bounding box arrays are wrapped in one additional array to be compatible with the polygon notation.
            </summary>
        </member>
        <member name="P:CoreTweet.BoundingBox.Type">
            <summary>
            The type of data encoded in the coordinates property. This will be "Polygon" for bounding boxes.
            </summary>
        </member>
        <member name="T:CoreTweet.GeoResult">
            <summary>
                Locates places near the given coordinates which are similar in name.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.Places">
            <summary>
                Places.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.Token">
            <summary>
                The token needed to be able to create a new place.
            </summary>
        </member>
        <member name="T:CoreTweet.TrendsResult">
            <summary>
                 Trending topics for a specific WOEID
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.AsOf">
            <summary>
                The UTC datetime that the trends are valid as of.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.CreatedAt">
            <summary>
                The UTC datetime that this result was created at.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.Locations">
            <summary>
                Locations of trending topics.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.Trends">
            <summary>
                The queried trends.
            </summary>
        </member>
        <member name="T:CoreTweet.GeoAttributes">
            <summary>
                The metadata about places. 
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.StreetAddress">
            <summary>
                The address of street.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Locality">
            <summary>
                The city the place is in.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Region">
            <summary>
                The administrative region the place is in.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Iso3CountryCode">
            <summary>
                The country code.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.PostalCode">
            <summary>
                In the preferred local format for the place.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoAttributes.Phone">
            <summary>
                In the preferred local format for the place, include long distance code.
            </summary>
        </member>
        <member name="P:CoreTweet.Location.Name">
            <summary>
                The name of this location.
            </summary>
        </member>
        <member name="P:CoreTweet.Location.WoeId">
            <summary>
                The WOEID of this location.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Name">
            <summary>
                The name of this trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Url">
            <summary>
                URL to search this trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Query">
            <summary>
                The query string for search.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.AlwaysUseHttps">
            <summary>
            When true, always use https.
            </summary>
            <value>
            <c>true</c> if always use https; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CoreTweet.Setting.IsDiscoverableByEmail">
            <summary>
            When true, your friend can discover you by your email address.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.GeoEnabled">
            <summary>
                When true, indicates that the user has enabled the possibility of geotagging their Tweets. This field must be true for the current user to attach geographic data when using POST statuses/update.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.Language">
            <summary>
                The BCP 47 code for the user's self-declared user interface language. May or may not have anything to do with the content of their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.IsProtected">
            <summary>
                When true, indicates that this user has chosen to protect their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.ScreenName">
            <summary>
                The screen name, handle, or alias that this user identifies themselves with. screen_names are unique but subject to change. Use id_str as a user identifier whenever possible. Typically a maximum of 15 characters long, but some historical accounts may exist with longer names.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.ShowAllInlineMedia">
            <summary>
                Indicates that the user would like to see media inline. Somewhat disused.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.SleepTime">
            <summary>
            <para>Gets or sets the sleep time.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TimeZone">
            <summary>
            <para>Gets or sets the time zone.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TrendLocaion">
            <summary>
            <para>Gets or sets the trend locaion.</para>
            </summary>
        </member>
        <member name="T:CoreTweet.Status">
            <summary>
            Tweets are the basic atomic building block of all things Twitter.
            Users tweet Tweets, also known more generically as "status updates." 
            Tweets can be embedded, replied to, favorited, unfavorited and deleted.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Id">
            <summary>
                The integer representation of the unique identifier for this Tweet.
            </summary>
            <seealso cref="!:https://dev.twitter.com/docs/twitter-ids-json-and-snowflake"/>
        </member>
        <member name="P:CoreTweet.Status.Contributors">
            <summary>
                Nullable. An collection of brief user objects (usually only one) indicating users who contributed to the authorship of the tweet, on behalf of the official tweet author.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Coordinates">
            <summary>
                Nullable. Represents the geographic location of this Tweet as reported by the user or client application.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.CreatedAt">
            <summary>
                Time when this Tweet was created.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.CurrentUserRetweet">
            <summary>
            <para>
                Details the Tweet ID of the user's own retweet (if existent) of this Tweet.
            </para>
            <para>
                Only surfaces on methods supporting the include_my_retweet parameter, when set to true.
            </para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Entities">
            <summary>
                Entities which have been parsed out of the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsFavorited">
            <summary>
                Nullable. Perspectival. Indicates whether this Tweet has been favorited by the authenticating user.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.FavoriteCount">
            <summary>
                Nullable. Indicates approximately how many times this Tweet has been "favorited" by Twitter users.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToScreenName">
            <summary>
                Nullable. If the represented Tweet is a reply, this field will contain the screen name of the original Tweet's author.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToStatusId">
            <summary>
                Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToUserId">
            <summary>
                Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's author ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Place">
            <summary>
                Nullable. When present, indicates that the tweet is associated (but not necessarily originating from) a Place.
            </summary>
            <seealso cref="!:https://dev.twitter.com/docs/platform-objects/places"/>
        </member>
        <member name="P:CoreTweet.Status.PossiblySensitive">
            <summary>
                Nullable. This field only surfaces when a tweet contains a link.
                The meaning of the field doesn't pertain to the tweet content itself, but instead it is an indicator
                that the URL contained in the tweet may contain content or media identified as sensitive content.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Scopes">
            <summary>
                A set of key-value pairs indicating the intended contextual delivery of the containing Tweet. Currently used by Twitter's Promoted Products.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.RetweetCount">
            <summary>
                Number of times this Tweet has been retweeted.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsRetweeted">
            <summary>
                Perspectival. Indicates whether this Tweet has been retweeted by the authenticating user.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.RetweetedStatus">
            <summary>
            <para> Users can amplify the broadcast of tweets authored by other users by retweeting. </para> 
            <para> Retweets can be distinguished from typical Tweets by the existence of a retweeted_status attribute. </para>
            <para> This attribute contains a representation of the original Tweet that was retweeted. </para> 
            <para> Note that retweets of retweets do not show representations of the intermediary retweet, but only the original tweet. (Users can also unretweet a retweet they created by deleting their retweet.) </para> 
            </summary>
            <value>
            The retweeted status.
            </value>
        </member>
        <member name="P:CoreTweet.Status.Source">
            <summary>
                Utility used to post the Tweet, as an HTML-formatted string. Tweets from the Twitter website have a source value of web.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Text">
            <summary>
                The actual UTF-8 text of the status update.
            </summary>
            <seealso cref="!:https://github.com/twitter/twitter-text-rb/blob/master/lib/twitter-text/regex.rb"/>
        </member>
        <member name="P:CoreTweet.Status.IsTruncated">
            <summary>
                Indicates whether the value of the text parameter was truncated, for example, as a result of a retweet exceeding the 140 character Tweet length.
                Truncated text will end in ellipsis, like this ...
            </summary>
        </member>
        <member name="P:CoreTweet.Status.User">
            <summary>
                The user who posted this Tweet. Perspectival attributes embedded within this object are unreliable.
            </summary>
            <seealso cref="!:https://dev.twitter.com/docs/platform-objects/users"/>
        </member>
        <member name="P:CoreTweet.Status.WithheldCopyright">
            <summary>
                When present and set to "true", it indicates that this piece of content has been withheld due to a DMCA complaint.
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act"/>
        </member>
        <member name="P:CoreTweet.Status.WithheldInCountries">
            <summary>
                When present, indicates a list of uppercase two-letter country codes this content is withheld from.
            </summary>
            <see cref="!:https://dev.twitter.com/blog/new-withheld-content-fields-api-responses"/>
        </member>
        <member name="P:CoreTweet.Status.WithheldScope">
            <summary>
                When present, indicates whether the content being withheld is the "status" or a "user".
            </summary>
            <see cref="!:https://dev.twitter.com/blog/new-withheld-content-fields-api-responses"/>
        </member>
        <member name="T:CoreTweet.Contributors">
            <summary>
            Contributors.
            An collection of brief user objects (usually only one)
            indicating users who contributed to the authorship of the tweet,
            on behalf of the official tweet author.
            </summary>
        </member>
        <member name="P:CoreTweet.Contributors.Id">
            <summary>
                The integer representation of the ID of the user who contributed to this Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Contributors.ScreenName">
            <summary>
                The screen name of the user who contributed to this Tweet.
            </summary>
        </member>
        <member name="T:CoreTweet.Coordinates">
            <summary>
            Coordinates.
            Represents the geographic location with longitude and latitude points.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Longtitude">
            <summary>
                The longtitude of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Latitude">
            <summary>
                The latitude of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates._coordinates">
            <summary>
            The array of coordinates.
            Used internally.
            </summary>
            <value>
            Coordinates.
            </value>
        </member>
        <member name="P:CoreTweet.Coordinates.Type">
            <summary>
                The type of data encoded in the coordinates property. This will be "Point" for Tweet coordinates fields.
            </summary>
        </member>
        <member name="T:CoreTweet.DirectMessage">
            <summary>
            Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Id">
            <summary>
            The integer representation of the unique identifier for this Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Sender">
            <summary>
            The sender of this Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Recipient">
            <summary>
            The Recipient of this Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.CreatedAt">
            <summary>
                Time when this Direct message was created.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Entities">
            <summary>
                Entities which have been parsed out of the text of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Text">
            <summary>
            The actual UTF-8 text of the status update.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="T:CoreTweet.Tokens">
            <summary>
            The OAuth tokens.
            </summary>
        </member>
        <member name="M:CoreTweet.Tokens.CreateAuthorizationHeader(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates string for Authorization header for OAuth 1.0A.
            </summary>
            <param name="type">Type of HTTP request.</param>
            <param name="url">URL.</param>
            <param name="parameters">Parameters.</param>
            <returns>String for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.Tokens.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </returns>
        </member>
        <member name="M:CoreTweet.Tokens.Create(System.String,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Make an instance of Tokens.
            </summary>
            <param name='consumerKey'>
            Consumer key.
            </param>
            <param name='consumerSecret'>
            Consumer secret.
            </param>
            <param name='accessToken'>
            Access token.
            </param>
            <param name='accessSecret'>
            Access secret.
            </param>
            <param name="userID">
            User's ID.
            </param>
            <param name="screenName">
            User's screen name.
            </param>
        </member>
        <member name="P:CoreTweet.Tokens.AccessToken">
            <summary>
            The access token.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.AccessTokenSecret">
            <summary>
            The access token secret.
            </summary> 
        </member>
        <member name="P:CoreTweet.Tokens.UserId">
            <summary>
            The user ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.ScreenName">
            <summary>
            The screen name
            </summary>
        </member>
        <member name="T:CoreTweet.User">
            <summary>
            A user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsContributorsEnabled">
            <summary>
                Indicates that the user has an account with "contributor mode" enabled, allowing for Tweets issued by the user to be co-authored by another account. Rarely true.
            </summary>
        </member>
        <member name="P:CoreTweet.User.CreatedAt">
            <summary>
                The UTC datetime that the user account was created on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsDefaultProfile">
            <summary>
                When true, indicates that the user has not altered the theme or background of their user profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsDefaultProfileImage">
            <summary>
                When true, indicates that the user has not uploaded their own avatar and a default egg avatar is used instead.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Description">
            <summary>
                Nullable. The user-defined UTF-8 string describing their account.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Entities">
            <summary>
                Entities which have been parsed out of the url or description fields defined by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.FavouritesCount">
            <summary>
                The number of tweets this user has favorited in the account's lifetime. British spelling used in the field name for historical reasons.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsFollowRequestSent">
            <summary>
                Nullable. Perspectival. When true, indicates that the authenticating user has issued a follow request to this protected user account.
            </summary>
        </member>
        <member name="P:CoreTweet.User.FollowersCount">
            <summary>
                The number of followers this account currently has. Under certain conditions of duress, this field will temporarily indicate "0."
            </summary>
        </member>
        <member name="P:CoreTweet.User.FriendsCount">
            <summary>
                The number of users this account is following (AKA their "followings"). Under certain conditions of duress, this field will temporarily indicate "0."
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsGeoEnabled">
            <summary>
                When true, indicates that the user has enabled the possibility of geotagging their Tweets. This field must be true for the current user to attach geographic data when using POST statuses/update.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Id">
            <summary>
                The integer representation of the unique identifier for this User. This number is greater than 53 bits and some programming languages may have difficulty/silent defects in interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use id_str for fetching the identifier to stay on the safe side.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsTranslator">
            <summary>
                When true, indicates that the user is a participant in Twitter's translator community.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Language">
            <summary>
                The BCP 47 code for the user's self-declared user interface language. May or may not have anything to do with the content of their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ListedCount">
            <summary>
                The number of public lists that this user is a member of.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Location">
            <summary>
                Nullable. The user-defined location for this account's profile. Not necessarily a location nor parseable. This field will occasionally be fuzzily interpreted by the Search service.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Name">
            <summary>
                The name of the user, as they've defined it. Not necessarily a person's name. Typically capped at 20 characters, but subject to change.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundColor">
            <summary>
                The hexadecimal color chosen by the user for their background.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundImageUrl">
            <summary>
                A HTTP-based URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundImageUrlHttps">
            <summary>
                A HTTPS-based URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProfileBackgroundTile">
            <summary>
                When true, indicates that the user's profile_background_image_url should be tiled when displayed.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBannerUrl">
            <summary>
                The HTTPS-based URL pointing to the standard web representation of the user's uploaded profile banner. By adding a final path element of the URL, you can obtain different image sizes optimized for specific displays. In the future, an API method will be provided to serve these URLs so that you need not modify the original URL. For size variations, please see User Profile Images and Banners.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileImageUrl">
            <summary>
                A HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileImageUrlHttps">
            <summary>
                A HTTPS-based URL pointing to the user's avatar image.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileLinkColor">
            <summary>
                The hexadecimal color the user has chosen to display links with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileSidebarBorderColor">
            <summary>
                The hexadecimal color the user has chosen to display sidebar borders with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileSidebarFillColor">
            <summary>
                The hexadecimal color the user has chosen to display sidebar backgrounds with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileTextColor">
            <summary>
                The hexadecimal color the user has chosen to display text with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProfileUseBackgroundImage">
            <summary>
                When true, indicates the user wants their uploaded background image to be used.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProtected">
            <summary>
                When true, indicates that this user has chosen to protect their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ScreenName">
            <summary>
                The screen name, handle, or alias that this user identifies themselves with. screen_names are unique but subject to change. Use id_str as a user identifier whenever possible. Typically a maximum of 15 characters long, but some historical accounts may exist with longer names.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsShowAllInlineMedia">
            <summary>
                Indicates that the user would like to see media inline. Somewhat disused.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Status">
            <summary>
                Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this data cannot be provided and this field will be omitted, null, or empty. Perspectival attributes within tweets embedded within users cannot always be relied upon.
            </summary>
        </member>
        <member name="P:CoreTweet.User.StatusesCount">
            <summary>
                The number of tweets (including retweets) issued by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.TimeZone">
            <summary>
                Nullable. A string describing the Time Zone this user declares themselves within.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Url">
            <summary>
                Nullable. A URL provided by the user in association with their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.UtcOffset">
            <summary>
                Nullable. The offset from GMT/UTC in seconds.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsVerified">
            <summary>
                When true, indicates that the user has a verified account.
            </summary>
        </member>
        <member name="P:CoreTweet.User.WithheldInCountries">
            <summary>
                When present, indicates a textual representation of the two-letter country codes this user is withheld from.
            </summary>
        </member>
        <member name="P:CoreTweet.User.WithheldScope">
            <summary>
                When present, indicates whether the content being withheld is the "status" or a "user."
            </summary>
        </member>
        <member name="P:CoreTweet.RelationShip.Target">
            <summary>
            The target of the relationship.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:CoreTweet.RelationShip.Source">
            <summary>
            The source of the relationship.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.Id">
            <summary>
            The ID of the user.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.ScreenName">
            <summary>
            The screen name of the user.
            </summary>
            <value>
            The screen name.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.IsFollowing">
            <summary>
            Gets whether you are following the user or not.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.IsFollowedBy">
            <summary>
            Gets whether the user is following you or not.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.CanDM">
            <summary>
            When true, you can send a direct message to the user.
            </summary>
            <value>
            <c>true</c> if you can send direct message; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.AllReplies">
            <summary>
            Gets or sets all replies.
            </summary>
            <value>
            All replies.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.WantsRetweets">
            <summary>
            Gets whether the user wants retweets or not.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.IsBlocking">
            <summary>
            Gets whether you are blocking the user or not.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.IsMarkedSpam">
            <summary>
            Gets whether you marked the user as spam.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.IsNotificationsEnabled">
            <summary>
            Gets whether the notifications enabled or not.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>
            The connections.
            </value>
        </member>
        <member name="P:CoreTweet.Friendship.IsMuting">
            <summary>
            Gets whether you are muting the user or not.
            </summary>
            <value>
            The bool value.
            </value>
        </member>
        <member name="P:CoreTweet.Category.Name">
            <summary>
            The name of the category.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CoreTweet.Category.Slug">
            <summary>
            The slug of the category.
            </summary>
            <value>
            The slug.
            </value>
        </member>
        <member name="P:CoreTweet.Category.Size">
            <summary>
            The size of the category.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:CoreTweet.Category.Users">
            <summary>
            The users in this category.
            </summary>
            <value>
            The users.</value>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Width">
            <summary>
            Width in pixels of this size.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Height">
            <summary>
            Height in pixels of this size.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Url">
            <summary>
            URL of this size.
            </summary>
        </member>
        <member name="T:CoreTweet.Request">
            <summary>
            Sends a request to Twitter and some other web services.
            </summary>
        </member>
        <member name="M:CoreTweet.Request.HttpGetAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a GET request.
            </summary>
            <returns>The response.</returns>
            <param name="url">URL.</param>
            <param name="prm">Parameters.</param>
            <param name="authorizationHeader">String of OAuth header.</param>
            <param name="userAgent">User-Agent header.</param>
            <param name="proxy">Proxy information for the request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:CoreTweet.Request.HttpPostAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a POST request.
            </summary>
            <returns>The response.</returns>
            <param name="url">URL.</param>
            <param name="prm">Parameters.</param>
            <param name="authorizationHeader">String of OAuth header.</param>
            <param name="userAgent">User-Agent header.</param>
            <param name="proxy">Proxy information for the request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:CoreTweet.Request.HttpPostWithMultipartFormDataAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a POST request with multipart/form-data.
            </summary>
            <returns>The response.</returns>
            <param name="url">URL.</param>
            <param name="prm">Parameters.</param>
            <param name="authorizationHeader">String of OAuth header.</param>
            <param name="userAgent">User-Agent header.</param>
            <param name="proxy">Proxy information for the request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:CoreTweet.Request.HttpGet(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions)">
            <summary>
            Sends a GET request.
            </summary>
            <returns>The response.</returns>
            <param name="url">URL.</param>
            <param name="prm">Parameters.</param>
            <param name="authorizationHeader">String of OAuth header.</param>
            <param name="userAgent">User-Agent header.</param>
            <param name="proxy">Proxy information for the request.</param>
        </member>
        <member name="M:CoreTweet.Request.HttpPost(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions)">
            <summary>
            Sends a POST request.
            </summary>
            <returns>The response.</returns>
            <param name="url">URL.</param>
            <param name="prm">Parameters.</param>
            <param name="authorizationHeader">String of OAuth header.</param>
            <param name="userAgent">User-Agent header.</param>
            <param name="proxy">Proxy information for the request.</param>
        </member>
        <member name="M:CoreTweet.Request.HttpPostWithMultipartFormData(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions)">
            <summary>
            Sends a POST request with multipart/form-data.
            </summary>
            <returns>The response.</returns>
            <param name="url">URL.</param>
            <param name="prm">Parameters.</param>
            <param name="authorizationHeader">String of OAuth header.</param>
            <param name="userAgent">User-Agent header.</param>
            <param name="proxy">Proxy information for the request.</param>
        </member>
        <member name="M:CoreTweet.Request.GenerateSignature(CoreTweet.Tokens,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Generates the signature.
            </summary>
            <returns>The signature.</returns>
            <param name="t">Tokens.</param>
            <param name="httpMethod">The http method.</param>
            <param name="url">the URL.</param>
            <param name="prm">Parameters.</param>
        </member>
        <member name="M:CoreTweet.Request.GenerateParameters(System.String,System.String)">
            <summary>
            Generates the parameters.
            </summary>
            <returns>The parameters.</returns>
            <param name="consumerKey">Consumer key.</param>
            <param name="token">Token.</param>
        </member>
        <member name="M:CoreTweet.Request.UrlEncode(System.String)">
            <summary>
            Encodes the specified text.
            </summary>
            <returns>The encoded text.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:CoreTweet.Request.Rfc3986EscapeDataString(System.String)">
            <summary>
            Encodes the given string based on RFC3986
            </summary>
            <param name="text">string value.</param>
            <returns>The encodes text.</returns>
        </member>
        <member name="T:CoreTweet.MethodType">
            <summary>
            The type of the HTTP method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Get">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Post">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.Account">
            <summary>GET/POST account</summary>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
                <para>
                Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid.
                </para>           
                <para>
                Available parameters:
                </para><para> </para>
                <para>
                <paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.
                </para>
                <para>
                <paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.
                </para></summary>
            <returns>
            The user data of you.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="int trend_location_woeid (optional)"/> : The Yahoo! Where On Earth ID to use as the user's default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.</para>
            <para><paramref name="bool sleep_time_enabled (optional)"/> : When set to true, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.</para>
            <para><paramref name="int start_sleep_time (optional)"/> : The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.</para>
            <para><paramref name="int end_sleep_time (optional)"/> : The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.</para>
            <para><paramref name="string time_zone (optional)"/> : The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.</para>
            <para><paramref name="string lang (optional)"/> : The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.</para>
            </summary>
            <returns>
            Settings.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryServiceAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string device (required)"/> : Must be one of: sms, none.</para>
            <para><paramref name="bool include_entities (optional)"/> : When set to true, each tweet will include a node called "entities,". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities.</para>
            </summary>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified will be updated.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string name (optional)"/> : Full name associated with the profile. Maximum of 20 characters.</para>
            <para><paramref name="string url (optional)"/> : URL associated with the profile. Will be prepended with "http://" if not present. Maximum of 100 characters.</para>
            <para><paramref name="string location (optional)"/> : The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.</para>
            <para><paramref name="string description (optional)"/> : A description of the user owning the account. Maximum of 160 characters.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional) "/>: When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>
            The profile.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.</para>
            </summary>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColorsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string profile_background_color (optional)"/> : Profile background color.</para>
            <para><paramref name="string profile_link_color (optional)"/> : Profile link color.</para>
            <para><paramref name="string profile_sidebar_border_color (optional)"/> : Profile sidebar's border color.</para>
            <para><paramref name="string profile_sidebar_fill_color (optional)"/> : Profile sidebar's background color.</para>
            <para><paramref name="string profile_text_color (optional)"/> : Profile text color.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The profile.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
                <para>
                Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid.
                </para>           
                <para>
                Available parameters:
                </para><para> </para>
                <para>
                <paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.
                </para>
                <para>
                <paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.
                </para></summary>
            <returns>
            The user data of you.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="int trend_location_woeid (optional)"/> : The Yahoo! Where On Earth ID to use as the user's default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.</para>
            <para><paramref name="bool sleep_time_enabled (optional)"/> : When set to true, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.</para>
            <para><paramref name="int start_sleep_time (optional)"/> : The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.</para>
            <para><paramref name="int end_sleep_time (optional)"/> : The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.</para>
            <para><paramref name="string time_zone (optional)"/> : The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.</para>
            <para><paramref name="string lang (optional)"/> : The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.</para>
            </summary>
            <returns>
            Settings.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateDeliveryService(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string device (required)"/> : Must be one of: sms, none.</para>
            <para><paramref name="bool include_entities (optional)"/> : When set to true, each tweet will include a node called "entities,". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities.</para>
            </summary>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified will be updated.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string name (optional)"/> : Full name associated with the profile. Maximum of 20 characters.</para>
            <para><paramref name="string url (optional)"/> : URL associated with the profile. Will be prepended with "http://" if not present. Maximum of 100 characters.</para>
            <para><paramref name="string location (optional)"/> : The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.</para>
            <para><paramref name="string description (optional)"/> : A description of the user owning the account. Maximum of 160 characters.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional) "/>: When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>
            The profile.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.</para>
            </summary>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileColors(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string profile_background_color (optional)"/> : Profile background color.</para>
            <para><paramref name="string profile_link_color (optional)"/> : Profile link color.</para>
            <para><paramref name="string profile_sidebar_border_color (optional)"/> : Profile sidebar's border color.</para>
            <para><paramref name="string profile_sidebar_fill_color (optional)"/> : Profile sidebar's background color.</para>
            <para><paramref name="string profile_text_color (optional)"/> : Profile text color.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The profile.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Account.UpdateProfileImage(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="T:CoreTweet.Rest.Blocks">
            <summary>GET/POST blocks</summary>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <returns>IDs.</returns>
            <param name="parameters">
            Parameters.
            </param>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <returns>Users.</returns>
            <param name="parameters">
            Parameters.
            </param>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <returns>IDs.</returns>
            <param name="parameters">
            Parameters.
            </param>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates numeric user ids the authenticating user is blocking.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            IDs.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <returns>Users.</returns>
            <param name="parameters">
            Parameters.
            </param>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates numeric user objects the authenticating user is blocking.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            Users.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored.</para>
            <para>Note: Either screen_name or user_id must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.DirectMessages">
            <summary>
             GET/POST direct_messages
             These endpoints require an access token with RWD permissions.
             </summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.DirectMessages.SentAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the direct message.</para>
            </summary>
            <returns>Direct messages.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: One of user_id or screen_name are required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user who should receive the direct message. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user who should receive the direct message. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="string text (required)"/> : The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters.</para>
            </summary>
            <returns>The sent direct message.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the direct message to delete.</para>
            <para><paramref name="bool include_entities"/> : The entities node will not be included when set to false.</para>
            </summary>
            <returns>The direct message.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.DirectMessages.Received(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.DirectMessages.Sent(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the direct message.</para>
            </summary>
            <returns>Direct messages.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Note: One of user_id or screen_name are required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user who should receive the direct message. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user who should receive the direct message. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="string text (required)"/> : The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters.</para>
            </summary>
            <returns>The sent direct message.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.</para>
            <para>This method requires an access token with RWD (read, write and direct message) permissions.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the direct message to delete.</para>
            <para><paramref name="bool include_entities"/> : The entities node will not be included when set to false.</para>
            </summary>
            <returns>The direct message.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Favorites">
            <summary>GET/POST favorites</summary>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optonal)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.</para>
            <para><paramref name="int since_id (optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be omitted when set to false.</para>
            </summary>
            <returns>The statuses.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be omitted when set to false.</para>
            </summary>
            <returns>The favorited status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool include_entities (ooptional)"/> : The entities node will be omitted when set to false.</para>
            </summary>
            <returns>The destroied status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optonal)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.</para>
            <para><paramref name="int since_id (optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be omitted when set to false.</para>
            </summary>
            <returns>The statuses.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be omitted when set to false.</para>
            </summary>
            <returns>The favorited status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.</para>
            <para>This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool include_entities (ooptional)"/> : The entities node will be omitted when set to false.</para>
            </summary>
            <returns>The destroied status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Followers">
            <summary>GET followers</summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Followers.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page". The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            <para><paramref name="bool include_user_entities"/> : The user object entities node will be disincluded when set to false.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>Users.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Followers.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user IDs for every user following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            IDs.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page". The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            <para><paramref name="bool include_user_entities"/> : The user object entities node will be disincluded when set to false.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>Users.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user objects for users following the specified user.</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            Users.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Friends">
            <summary>GET firends</summary>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page". The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>IDs.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page". The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            <para><paramref name="bool include_user_entities"/> : The user object entities node will be disincluded when set to false.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>Users.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page". The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>IDs.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            IDs.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page". The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            <para><paramref name="bool include_user_entities"/> : The user object entities node will be disincluded when set to false.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>Users.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user objects for every user the specified user is following (otherwise known as their "friends").</para> 
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.</para>
            <para>Note: Either a screen_name or a user_id should be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to true, statuses will not be included in the returned user objects.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            Users.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Friendships">
            <summary>GET/POST Friendships</summary>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>
            IDs.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>IDs.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page."The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>IDs.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Friendships.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long source_id (optional)"/> : The user_id of the subject user.</para>
            <para><paramref name="string source_screen_name (optional)"/> : The screen_name of the subject user.</para>
            <para><paramref name="long target_id (optional)"/> : The user_id of the target user.</para>
            <para><paramref name="string target_screen_name (optional)"/> : The screen_name of the target user.</para>
            </summary>
            <returns>The relationship.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to befriend.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to befriend.</para>
            <para><paramref name="bool follow (optional)"/> : Enable notifications for the target user.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to unfollow.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to unfollow.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to befriend.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to befriend.</para>/// <para><paramref name=""/> :</para>
            <para><paramref name="bool device (optional)"/> : Enable/disable device notifications from the target user.</para>
            <para><paramref name="bool retweets (optional)"/> : Enable/disable retweets from the target user.</para>
            </summary>
            <returns>The relationship.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>
            IDs.
            </returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>IDs.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerate numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <param name='mode'>
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page."The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <param name="parameters">
            Parameters.
            </param>
            <returns>IDs.</returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerate numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            </summary>
            <param name='mode'>
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Friendships.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long source_id (optional)"/> : The user_id of the subject user.</para>
            <para><paramref name="string source_screen_name (optional)"/> : The screen_name of the subject user.</para>
            <para><paramref name="long target_id (optional)"/> : The user_id of the target user.</para>
            <para><paramref name="string target_screen_name (optional)"/> : The screen_name of the target user.</para>
            </summary>
            <returns>The relationship.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to befriend.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to befriend.</para>
            <para><paramref name="bool follow (optional)"/> : Enable notifications for the target user.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to unfollow.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to unfollow.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to befriend.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to befriend.</para>/// <para><paramref name=""/> :</para>
            <para><paramref name="bool device (optional)"/> : Enable/disable device notifications from the target user.</para>
            <para><paramref name="bool retweets (optional)"/> : Enable/disable retweets from the target user.</para>
            </summary>
            <returns>The relationship.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Geo">
            <summary>GET/POST geo</summary>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string place_id (required)"/> : A place in the world. These IDs can be retrieved from geo/reverse_geocode.</para>
            </summary>
            <returns>The geo.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (required)"/> : The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (required)"/> : The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string name (required)"/> : The name a place is known as.</para>
            <para><paramref name="string contained_within (optional)"/> : This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within "San Francisco, CA USA", you would specify a place_id of "5a110d312052166f"</para>
            <para><paramref name="string attribute:street_address (optional)"/> : This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted.</para>
            </summary>
            <returns>Places and the token.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (optional)"/> : The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (optional)"/> : The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string query (optional)"/> : Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query.</para>
            <para><paramref name="string ip (optional)"/> : An IP address. Used when attempting to fix geolocation based off of the user's IP address.</para>
            <para><paramref name="string granularity (optional)"/> : This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.</para>
            <para><paramref name="string accuracy (optional)"/> : A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).</para>
            <para><paramref name="int max_results (optional)"/> : A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here.</para>
            <para><paramref name="string contained_within (optional)"/> : This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.</para>
            <para><paramref name="string attribute:street_address (optional)"/> : This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted.</para>
            </summary>
            <returns>Places.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (required)"/> : The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (required)"/> : The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string accuracy (optional)"/> : A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).</para>
            <para><paramref name="string granularity (optional)"/> : This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.</para>
            <para><paramref name="int max_results (optional)"/> : A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here.</para>
            </summary>
            <returns>Places.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string place_id (required)"/> : A place in the world. These IDs can be retrieved from geo/reverse_geocode.</para>
            </summary>
            <returns>The geo.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.</para>
            <para>The token contained in the response is the token needed to be able to create a new place.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (required)"/> : The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (required)"/> : The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string name (required)"/> : The name a place is known as.</para>
            <para><paramref name="string contained_within (optional)"/> : This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within "San Francisco, CA USA", you would specify a place_id of "5a110d312052166f"</para>
            <para><paramref name="string attribute:street_address (optional)"/> : This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted.</para>
            </summary>
            <returns>Places and the token.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.</para>
            <para>Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.</para>
            <para>This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (optional)"/> : The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (optional)"/> : The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string query (optional)"/> : Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query.</para>
            <para><paramref name="string ip (optional)"/> : An IP address. Used when attempting to fix geolocation based off of the user's IP address.</para>
            <para><paramref name="string granularity (optional)"/> : This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.</para>
            <para><paramref name="string accuracy (optional)"/> : A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).</para>
            <para><paramref name="int max_results (optional)"/> : A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here.</para>
            <para><paramref name="string contained_within (optional)"/> : This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.</para>
            <para><paramref name="string attribute:street_address (optional)"/> : This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted.</para>
            </summary>
            <returns>Places.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (required)"/> : The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (required)"/> : The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string accuracy (optional)"/> : A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).</para>
            <para><paramref name="string granularity (optional)"/> : This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.</para>
            <para><paramref name="int max_results (optional)"/> : A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here.</para>
            </summary>
            <returns>Places.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Help">
            <summary>GET help</summary>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>Configurations.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>Languages.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns Twitter's Privacy Policy.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>The sentense.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>The sentense.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Help.Configuration(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>It is recommended applications request this endpoint when they are loaded, but no more than once a day.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>Configurations.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>Languages.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns Twitter's Privacy Policy.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>The sentense.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.</para>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>The sentense.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Help.RateLimitStatus(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="T:CoreTweet.Rest.Lists">
            <summary>GET/POST lists</summary>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            </summary>
            <returns>Lists.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="string sereen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.</para>
            <para><paramref name="bool filter_to_owned_lists (optional)"/> : When set to true, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.</para>
            </summary>
            <returns>Users.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>A list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="int count (optional)"/> : The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors.</para>
            <para><paramref name="long cursor (optional)"/> : Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.</para>
            </summary>
            <returns>Lists.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Lists.StatusesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new list for the authenticated user. Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string name (required)"/> : The name for the list.A list's name must start with a letter and can consist only of 25 or fewer letters, numbers, "-", or "_" characters.</para>
            <para><paramref name="string mode (optional)"/> : Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public.</para>
            <para><paramref name="string description (optional)"/> : The description to give the list.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The destroied list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the specified list. The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string name (optional)"/> : The name for the list.</para>
            <para><paramref name="string mode (optional)"/> : Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public.</para>
            <para><paramref name="string description (optional)"/> : The description to give the list.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.</para>
            <para>This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            </summary>
            <returns>Lists.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="string sereen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.</para>
            <para><paramref name="bool filter_to_owned_lists (optional)"/> : When set to true, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.</para>
            </summary>
            <returns>Users.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.</para>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="string sereen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="bool filter_to_owned_lists (optional)"/> : When set to true, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            Users.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>A list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="int count (optional)"/> : The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors.</para>
            <para><paramref name="long cursor (optional)"/> : Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.</para>
            </summary>
            <returns>Lists.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerate lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists.</para>
            <para>Note: A user_id or screen_name must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="int count (optional)"/> : The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            Users.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Lists.Statuses(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Lists.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new list for the authenticated user. Note that you can't create more than 20 lists per account.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string name (required)"/> : The name for the list.A list's name must start with a letter and can consist only of 25 or fewer letters, numbers, "-", or "_" characters.</para>
            <para><paramref name="string mode (optional)"/> : Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public.</para>
            <para><paramref name="string description (optional)"/> : The description to give the list.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the specified list. The authenticated user must own the list to be able to destroy it.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The destroied list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the specified list. The authenticated user must own the list to be able to update it.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string name (optional)"/> : The name for the list.</para>
            <para><paramref name="string mode (optional)"/> : Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public.</para>
            <para><paramref name="string description (optional)"/> : The description to give the list.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Members.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_sereen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the collection of list members to be broken into "pages" of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first "page".</para>
            </summary>
            <returns>Users.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Members.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string sereen_name (required)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Members.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para><para> </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Members.CreateAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Members.DeleteAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para><para> </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Members.DeleteAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Members.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_sereen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long cursor (semi-optional)"/> : Causes the collection of list members to be broken into "pages" of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first "page".</para>
            </summary>
            <returns>Users.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Members.Enumerate(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_sereen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long cursor (optional)"/> : The first cursor. If not be specified, enumerating starts from the first page.</para>
            </summary>
            <returns>
            Users.
            </returns>
            <see cref="!:https://dev.twitter.com/docs/misc/cursoring"/>
            <param name="mode">
            <para> Specify whether enumerating goes to the next page or the previous.</para>
            </param>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Members.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string sereen_name (required)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Members.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 500 members.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para><para> </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Members.CreateAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Members.Delete(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para><para> </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Members.DeleteAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Subscribers.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="bool include_entities"/> : When set to true, each tweet will include a node called "entities". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.</para>
            <para><paramref name="bool skip_status"/> : When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para><para> </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Subscribers.DeleteAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Subscribers.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="bool include_entities"/> : When set to true, each tweet will include a node called "entities". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.</para>
            <para><paramref name="bool skip_status"/> : When set to true, statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Subscribers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Note: Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.</para>
            <para>Avaliable parameters: </para><para> </para>
            <para><paramref name="long list_id (required)"/> : The numerical id of the list.</para>
            <para><paramref name="string slug (required)"/> : You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.</para>
            <para><paramref name="string owner_screen_name (optional)"/> : The screen name of the user who owns the list being requested by a slug.</para>
            <para><paramref name="long owner_id (optional)"/> : The user ID of the user who owns the list being requested by a slug.</para>
            </summary>
            <returns>The list.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Subscribers.Delete(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="T:CoreTweet.Rest.MutesUsers">
            <summary>GET/POST mutes/users</summary>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <seealso cref="!:https://dev.twitter.com/docs/api/1.1/get/mutes/users/ids"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out. If no cursor is provided, a value of -1 will be assumed, which is the first "page."</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <seealso cref="!:https://dev.twitter.com/docs/api/1.1/get/mutes/users/list"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page."</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the muted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the unmuted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <seealso cref="!:https://dev.twitter.com/docs/api/1.1/get/mutes/users/ids"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out. If no cursor is provided, a value of -1 will be assumed, which is the first "page."</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates numeric user ids the authenticating user has muted.</para>
            <seealso cref="!:https://dev.twitter.com/docs/api/1.1/get/mutes/users/ids"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out. If no cursor is provided, a value of -1 will be assumed, which is the first "page."</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <seealso cref="!:https://dev.twitter.com/docs/api/1.1/get/mutes/users/list"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page."</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Enumerates user objects the authenticating user has muted.</para>
            <seealso cref="!:https://dev.twitter.com/docs/api/1.1/get/mutes/users/list"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="long cursor (optional)"/> : Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page."</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will not be included when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the muted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Returns the unmuted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Note: Providing either screen_name or user_id is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Mutes">
            <summary>GET/POST mutes</summary>
        </member>
        <member name="T:CoreTweet.Rest.SavedSearches">
            <summary>
             GET/POST saved_searches
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the authenticated user's saved search queries.</para>
            <para>Avaliable parameters: Nothing. </para>
            </summary>
            <returns>Saved searches.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the saved search.</para>
            </summary>
            <returns>The saved search.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a new saved search for the authenticated user. A user may only have 25 saved searches.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string query (required)"/> : The query of the search the user would like to save.</para>
            </summary>
            <returns>The saved search.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the saved search.</para>
            </summary>
            <returns>The saved search.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the authenticated user's saved search queries.</para>
            <para>Avaliable parameters: Nothing. </para>
            </summary>
            <returns>Saved searches.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the saved search.</para>
            </summary>
            <returns>The saved search.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a new saved search for the authenticated user. A user may only have 25 saved searches.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string query (required)"/> : The query of the search the user would like to save.</para>
            </summary>
            <returns>The saved search.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The ID of the saved search.</para>
            </summary>
            <returns>The saved search.</returns>
            <param name='tokens'>
            Tokens.
            </param>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Search">
            <summary>GET search</summary>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.</para>
            <see cref="!:https://dev.twitter.com/docs/using-search"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="string q (required)"/> : A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may additionally be limited by complexity.</para>
            <para><paramref name="string geocode (optional)"/> : Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by "latitude,longitude,radius", where radius units must be specified as either "mi" (miles) or "km" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct "sub-regions" will be considered when using the radius modifier.</para>
            <para><paramref name="string lang (optional)"/> : Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.</para>
            <para><paramref name="string locale (optional)"/> : Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.</para>
            <para><paramref name="string result_type (optional)"/> : Optional. Specifies what type of search results you would prefer to receive. The current default is "mixed." Valid values include: * mixed: Include both popular and real time results in the response. * recent: return only the most recent results in the response. * popular: return only the most popular results in the response.</para>
            <para><paramref name="int count (optional)"/> : The number of tweets to return per page, up to a maximum of 100. Defaults to 15.</para>
            <para><paramref name="string until (optional)"/> : Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here.</para>
            <para><paramref name="long since_id (optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="long max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <returns>Statuses.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.</para>
            <see cref="!:https://dev.twitter.com/docs/using-search"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="string q (required)"/> : A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may additionally be limited by complexity.</para>
            <para><paramref name="string geocode (optional)"/> : Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by "latitude,longitude,radius", where radius units must be specified as either "mi" (miles) or "km" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct "sub-regions" will be considered when using the radius modifier.</para>
            <para><paramref name="string lang (optional)"/> : Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.</para>
            <para><paramref name="string locale (optional)"/> : Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.</para>
            <para><paramref name="string result_type (optional)"/> : Optional. Specifies what type of search results you would prefer to receive. The current default is "mixed." Valid values include: * mixed: Include both popular and real time results in the response. * recent: return only the most recent results in the response. * popular: return only the most popular results in the response.</para>
            <para><paramref name="int count (optional)"/> : The number of tweets to return per page, up to a maximum of 100. Defaults to 15.</para>
            <para><paramref name="string until (optional)"/> : Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here.</para>
            <para><paramref name="long since_id (optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="long max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <returns>Statuses.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Statuses">
            <summary>GET/POST statuses</summary>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines.</para>
            <seealso cref="!:https://dev.twitter.com/docs/working-with-timelines"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool contributor_details (optional)"/> : This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <param name="tokens">OAuth Tokens.</param>
            <param name="parameters">Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters. User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner. The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com. This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="int user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool contributor_details (optional)"/> : This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.</para>
            <para><paramref name="bool include_rts (optional)"/> : When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object.</para>
            <para><paramref name="bool exclude_replies (optional)"/> : This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses.</para>
            </summary>
            <param name='tokens'>OAuth Tokens.</param>
            <param name='parameters'>Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool contributor_details (optional)"/> : This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            <para><paramref name="bool exclude_replies (optional)"/> : This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses.</para>
            </summary>
            <param name='tokens'>OAuth Tokens.</param>
            <param name='parameters'>Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others. This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <seealso cref="!:https://dev.twitter.com/docs/working-with-timelines"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool include_entities (optional)"/> : The tweet entities node will be disincluded when set to false.</para>
            <para><paramref name="bool include_user_entities (optional)"/> :The user entities node will be disincluded when set to false..</para>
            </summary>
            <param name="tokens">OAuth Tokens.</param>
            <param name="parameters">Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The Tweet/status ID to return embed code for.</para>
            <para><paramref name="int maxwidth (optional)"/> : The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below.</para>
            <para><paramref name="bool hide_media (optional)"/> : Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false.</para>
            <para><paramref name="bool hide_thread (optional)"/> : Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false.</para>
            <para><paramref name="bool omit_script (optional)"/> : Specifies whether the embedded Tweet HTML should include a "script" element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the "script" element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false.</para>
            <para><paramref name="string align (optional)"/> : Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet.</para>
            <para><paramref name="string related (optional)"/> : A value for the TWT related parameter, as described in Web Intents. This value will be forwarded to all Web Intents calls.</para>
            <para><paramref name="string lang (optional)"/> : Language code for the rendered embed. This will affect the text and localization of the rendered HTML.</para>
            </summary>
            <returns>The HTML code and more.</returns>
            <param name='parameters'>
            Parameters.
            </param> 
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired Tweet.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <returns>The status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired Tweet.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of records to retrieve. Must be less than or equal to 100.</para>
            </summary>
            <returns>Statuses.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Statuses.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <param name='parameters'>Parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string status (required)"/> : The text of your status parameters, typically up to 140 characters. URL encode as necessary. t.co link wrapping may effect character counts.</para>
            <para><paramref name="long in_reply_to_status_id (optional)"/> : The ID of an existing status that the parameters is in reply to.</para>
            <para><paramref name="double lat (optional)"/> : The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (optional)"/> : The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string place_id (optional)"/> : A place in the world. These IDs can be retrieved from GET geo/reverse_geocode.</para>
            <para><paramref name="bool display_coordinates (optional)"/> : Whether or not to put a pin on the exact coordinates a tweet has been sent from.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            </summary>
            <returns>The updated status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            </summary>
            <returns>The destroied status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            </summary>
            <returns>The retweeted status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines.</para>
            <seealso cref="!:https://dev.twitter.com/docs/working-with-timelines"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool contributor_details (optional)"/> : This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <param name="tokens">OAuth Tokens.</param>
            <param name="parameters">Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters. User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner. The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com. This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="int user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool contributor_details (optional)"/> : This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.</para>
            <para><paramref name="bool include_rts (optional)"/> : When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object.</para>
            <para><paramref name="bool exclude_replies (optional)"/> : This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses.</para>
            </summary>
            <param name='tokens'>OAuth Tokens.</param>
            <param name='parameters'>Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool contributor_details (optional)"/> : This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            <para><paramref name="bool exclude_replies (optional)"/> : This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses.</para>
            </summary>
            <param name='tokens'>OAuth Tokens.</param>
            <param name='parameters'>Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others. This timeline is a subset of the user's GET statuses/user_timeline.</para>
            <seealso cref="!:https://dev.twitter.com/docs/working-with-timelines"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="int count (optional)"/> : Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.</para>
            <para><paramref name="int since_id(optional)"/> : Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.</para>
            <para><paramref name="int max_id (optional)"/> : Returns results with an ID less than (that is, older than) or equal to the specified ID.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool include_entities (optional)"/> : The tweet entities node will be disincluded when set to false.</para>
            <para><paramref name="bool include_user_entities (optional)"/> :The user entities node will be disincluded when set to false..</para>
            </summary>
            <param name="tokens">OAuth Tokens.</param>
            <param name="parameters">Parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format.</para>
            <para>While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The Tweet/status ID to return embed code for.</para>
            <para><paramref name="int maxwidth (optional)"/> : The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below.</para>
            <para><paramref name="bool hide_media (optional)"/> : Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false.</para>
            <para><paramref name="bool hide_thread (optional)"/> : Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false.</para>
            <para><paramref name="bool omit_script (optional)"/> : Specifies whether the embedded Tweet HTML should include a "script" element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the "script" element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false.</para>
            <para><paramref name="string align (optional)"/> : Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet.</para>
            <para><paramref name="string related (optional)"/> : A value for the TWT related parameter, as described in Web Intents. This value will be forwarded to all Web Intents calls.</para>
            <para><paramref name="string lang (optional)"/> : Language code for the rendered embed. This will affect the text and localization of the rendered HTML.</para>
            </summary>
            <returns>The HTML code and more.</returns>
            <param name='parameters'>
            Parameters.
            </param> 
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the tweet.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired Tweet.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <returns>The status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired Tweet.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            <para><paramref name="int count (optional)"/> : Specifies the number of records to retrieve. Must be less than or equal to 100.</para>
            </summary>
            <returns>Statuses.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Statuses.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <param name='parameters'>Parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <param name='parameters'>Parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's current status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media.</para>
            <para>For each parameters attempt, the parameters text is compared with the authenticating user's recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row.</para>
            <para>While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string status (required)"/> : The text of your status parameters, typically up to 140 characters. URL encode as necessary. t.co link wrapping may effect character counts.</para>
            <para><paramref name="long in_reply_to_status_id (optional)"/> : The ID of an existing status that the parameters is in reply to.</para>
            <para><paramref name="double lat (optional)"/> : The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.</para>
            <para><paramref name="double long (optional)"/> : The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.</para>
            <para><paramref name="string place_id (optional)"/> : A place in the world. These IDs can be retrieved from GET geo/reverse_geocode.</para>
            <para><paramref name="bool display_coordinates (optional)"/> : Whether or not to put a pin on the exact coordinates a tweet has been sent from.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            </summary>
            <returns>The updated status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            </summary>
            <returns>The destroied status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retweets a tweet. Returns the original tweet with retweet details embedded.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The numerical ID of the desired status.</para>
            <para><paramref name="bool trim_user (optional)"/> : When set to true, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.</para>
            </summary>
            <returns>The retweeted status.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Trends">
            <summary>GET trends</summary>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvaliableAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <seealso cref="!:http://developer.yahoo.com/geo/geoplanet/"/>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>The locations.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <seealso cref="!:http://developer.yahoo.com/geo/geoplanet/"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (required)"/> : If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.</para>
            <para><paramref name="double long (required)"/> : If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.</para>
            </summary>
            <returns>The locations.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID.</para>
            </summary>
            <returns>The queries.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Avaliable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>The response is an array of "locations" that encode the location's id and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <seealso cref="!:http://developer.yahoo.com/geo/geoplanet/"/>
            <para>Avaliable parameters: Nothing.</para>
            </summary>
            <returns>The locations.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>The response is an array of "locations" that encode the location's ID and some other human-readable information such as a canonical name and country the location belongs in.</para>
            <para>A id is a Yahoo! Where On Earth ID.</para>
            <seealso cref="!:http://developer.yahoo.com/geo/geoplanet/"/>
            <para>Avaliable parameters: </para>
            <para><paramref name="double lat (required)"/> : If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.</para>
            <para><paramref name="double long (required)"/> : If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.</para>
            </summary>
            <returns>The locations.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.</para>
            <para>This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (required)"/> : The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID.</para>
            </summary>
            <returns>The queries.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Rest.Users">
            <summary>GET/POST users</summary>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Users.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the size of the specified user's profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            </summary>
            <returns>The size.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string q (required)"/> : The search query to run against people search.</para>
            <para><paramref name="int page (optional)"/> : Specifies the page of results to retrieve.</para>
            <para><paramref name="int count (optional)"/> : The number of potential user results to retrieve per page. This value has a maximum of 20.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded from embedded tweet objects when set to false.</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Either an id or screen_name is required for this method.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string lang (optional)"/> : Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list.</para>
            </summary>
            <returns>Catgories.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para><paramref name="string slug (required)"/> : The short name of list or a category</para>
            <para><paramref name="string lang (optional)"/> : Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list.</para>
            </summary>
            <returns>The category.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string slug (required)"/> : The short name of list or a category</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The ID or screen_name of the user you want to report as a spammer. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user you want to report as a spammer. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            </summary>
            <returns>The User.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Note: A user_id or screen_name is required.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user for whom to return results for.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            <para><paramref name="bool skip_status (optional)"/> : When set to either true, t or 1 statuses will not be included in the returned user objects.</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Rest.Users.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the size of the specified user's profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in User Profile Images and Banners.</para>
            <para>Note: Always specify either an user_id or screen_name when requesting this method.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long id (optional)"/> : The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            <para><paramref name="string screen_name (optional)"/> : The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            </summary>
            <returns>The size.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.</para>
            <para>Only the first 1,000 matching results are available.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string q (required)"/> : The search query to run against people search.</para>
            <para><paramref name="int page (optional)"/> : Specifies the page of results to retrieve.</para>
            <para><paramref name="int count (optional)"/> : The number of potential user results to retrieve per page. This value has a maximum of 20.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded from embedded tweet objects when set to false.</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible.</para>
            <para>GET users/lookup is used to retrieve a bulk collection of user objects.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="long user_id (required)"/> : The ID of the user for whom to return results for. Either an id or screen_name is required for this method.</para>
            <para><paramref name="string screen_name (required)"/> : The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.</para>
            <para><paramref name="bool include_entities (optional)"/> : The entities node will be disincluded when set to false.</para>
            </summary>
            <returns>The user.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in GET users/suggestions/:slug to get the users in that category.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string lang (optional)"/> : Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list.</para>
            </summary>
            <returns>Catgories.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>It is recommended that applications cache this data for no more than one hour.</para>
            <para><paramref name="string slug (required)"/> : The short name of list or a category</para>
            <para><paramref name="string lang (optional)"/> : Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list.</para>
            </summary>
            <returns>The category.</returns>
            <param name="parameters">
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string slug (required)"/> : The short name of list or a category</para>
            </summary>
            <returns>Users.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks/create on behalf of the authenticated user.</para>
            <para>Note: One of these parameters must be provided.</para>
            <para>Avaliable parameters: </para>
            <para><paramref name="string screen_name (optional)"/> : The ID or screen_name of the user you want to report as a spammer. Helpful for disambiguating when a valid screen name is also a user ID.</para>
            <para><paramref name="long user_id (optional)"/> : The ID of the user you want to report as a spammer. Helpful for disambiguating when a valid user ID is also a valid screen name.</para>
            </summary>
            <returns>The User.</returns>
            <param name='parameters'>
            Parameters.
            </param>
        </member>
        <member name="T:CoreTweet.Streaming.DisconnectCode">
            <summary>
            Disconnect code.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventCode">
            <summary>
            Event code.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.MessageType">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingMessage">
            <summary>
            Base class of streaming messages.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingMessage.GetMessageType">
            <summary>
            Gets the message type
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingMessage.Parse(CoreTweet.Core.TokensBase,System.String)">
            <summary>
            Parse the specified json
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingMessage.ExtractRoot(CoreTweet.Core.TokensBase,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts the root to parse
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingMessage.Type">
            <summary>
            Gets the type of this message.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:CoreTweet.Streaming.StatusMessage">
            <summary>
            Status message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StatusMessage.Status">
            <summary>
            The status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="T:CoreTweet.Streaming.FriendsMessage">
            <summary>
            Message contains ids of friends.
            </summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Streaming.FriendsMessage.GetEnumerator" で無視されました -->
        <member name="P:CoreTweet.Streaming.FriendsMessage.Friends">
            <summary>
            The ids of friends.
            </summary>
            <value>The friends.</value>
        </member>
        <member name="T:CoreTweet.Streaming.LimitMessage">
            <summary>
            Message that notices limit.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.IDMessage">
            <summary>
            Message contains ids.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.IDMessage.ID">
            <summary>
            ID.
            </summary>
            <value>The I.</value>
        </member>
        <member name="P:CoreTweet.Streaming.IDMessage.UserID">
            <summary>
            User's ID.
            </summary>
            <value>The user I.</value>
        </member>
        <member name="P:CoreTweet.Streaming.IDMessage.UpToStatusID">
            <summary>
            Status ID.
            </summary>
            <value>Up to status I.</value>
        </member>
        <member name="P:CoreTweet.Streaming.IDMessage.WithheldInCountries">
            <summary>
            Withhelds.
            </summary>
            <value>The withheld in countries.</value>
        </member>
        <member name="T:CoreTweet.Streaming.DisconnectMessage">
            <summary>
            Message published when Twitter disconnects the stream.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.Code">
            <summary>
            The disconnect code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.StreamName">
            <summary>
            The screen name of current stream.
            </summary>
            <value>The name of the stream.</value>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.Reason">
            <summary>
            Human readable message for the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:CoreTweet.Streaming.WarningMessage">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.Code">
            <summary>
            Warning code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.Message">
            <summary>
            Warning message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.PercentFull">
            <summary>
            Percentage of the stall messages
            </summary>
            <value>The percent full.</value>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.UserID">
            <summary>
            Target user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="T:CoreTweet.Streaming.EventTargetType">
            <summary>
            Event target type.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventMessage">
            <summary>
            Event message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Target">
            <summary>
            The target.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Event">
            <summary>
            The event code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetType">
            <summary>
            The type of target,
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetStatus">
            <summary>
            The target status.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetList">
            <summary>
            The target list.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.CreatedAt">
            <summary>
            When this event happened.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EnvelopesMessage">
            <summary>
            Envelopes message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EnvelopesMessage.ForUser">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EnvelopesMessage.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.ControlMessage">
            <summary>
            Control message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ControlMessage.ControlUri">
            <summary>
            The URI.
            </summary>
            <value>The control URI.</value>
        </member>
        <member name="T:CoreTweet.Streaming.RawJsonMessage">
            <summary>
            Raw JSON message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.RawJsonMessage.Json">
            <summary>
            The raw JSON.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingType">
            <summary>
            Types of twitter streaming.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.User">
            <summary>
            The user stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Site">
            <summary>
            The site stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Filter">
            <summary>
            The filter stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Sample">
            <summary>
            The sample stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Firehose">
            <summary>
            The firehose stream.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.StartStream(CoreTweet.Streaming.StreamingType,CoreTweet.Streaming.StreamingParameters)">
            <summary>
            Starts the twitter stream.
            </summary>
            <returns>
            The stream messages.
            </returns>
            <param name='type'>
            Type of streaming.
            </param>
            <param name='parameters'>
            Parameters of streaming.
            </param>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingParameters">
            <summary>
            Parameters for streaming API.
            </summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:CoreTweet.Streaming.StreamingParameters.#ctor(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])" で無視されました -->
        <member name="M:CoreTweet.Streaming.StreamingParameters.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class.
            </summary>
            <param name="streamingParameters">
            Streaming parameters.
            </param>
            <seealso cref="!:http://dev.twitter.com/docs/streaming-apis/parameters"/>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.Create``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class.
            </summary>
            <param name="streamingParameters">
            Streaming parameters.
            </param>
            <seealso cref="!:http://dev.twitter.com/docs/streaming-apis/parameters"/>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingParameters.Parameters">
            <summary>
            Gets the raw parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:CoreTweet.Property">
            <summary>
            Properties of CoreTweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Property.ApiVersion">
            <summary>
            The version of the Twitter API.
            To change this value is not recommended but allowed. 
            </summary>
        </member>
    </members>
</doc>

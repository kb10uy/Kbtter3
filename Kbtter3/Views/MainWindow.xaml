<Window x:Class="Kbtter3.Views.MainWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Kbtter3.Views"
        xmlns:vm="clr-namespace:Kbtter3.ViewModels"
        xmlns:vc="clr-namespace:Kbtter3.Views.Control"
        Title="Kbtter3 Polystyrene" Height="600" Width="700">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="Information">
            <l:InformationDialogInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Window.Resources>
        <ResourceDictionary Source="KbtterResource.xaml"/>
    </Window.Resources>

    <Grid Background="{StaticResource TwitterColorWhite}" Name="GridMain">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="4"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="32"/>
        </Grid.RowDefinitions>

        <Grid Background="{StaticResource TwitterColorPrimary}" Height="40">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="40"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="40"/>
            </Grid.ColumnDefinitions>
            <Image Width="32" Height="32" Grid.Column="0" Margin="4,4,0,4" HorizontalAlignment="Left" Name="ImageUserProfileImage"
                   DataContext="{Binding UserProfileImageUri,Converter={StaticResource UriToBitmapImageAsyncConverter}}"
                   Source="{Binding Result}"/>

            <StackPanel Grid.Column="1" Margin="8,0,8,0">
                <TextBlock Text="{Binding UserProfileStatuses}" FontSize="16"/>
                <TextBlock FontSize="10">ツイート</TextBlock>
            </StackPanel>
            <StackPanel Grid.Column="2" Margin="8,0,8,0">
                <TextBlock Text="{Binding UserProfileFavorites}" FontSize="16"/>
                <TextBlock FontSize="10">お気に入り</TextBlock>
            </StackPanel>
            <StackPanel Grid.Column="3" Margin="8,0,8,0">
                <TextBlock Text="{Binding UserProfileFriends}" FontSize="16"/>
                <TextBlock FontSize="10">フォロー</TextBlock>
            </StackPanel>
            <StackPanel Grid.Column="4" Margin="8,0,8,0">
                <TextBlock Text="{Binding UserProfileFollowers}" FontSize="16"/>
                <TextBlock FontSize="10">フォロワー</TextBlock>
            </StackPanel>
            <Menu Grid.Column="6" VerticalAlignment="Center" HorizontalAlignment="Stretch" Background="Transparent">
                <MenuItem VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                    <MenuItem.Header>
                        <TextBlock FontFamily="Marlett" FontSize="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">6</TextBlock>
                    </MenuItem.Header>
                    <MenuItem Name="MenuCSharpBeam" Header="C#ﾋﾞｰﾑﾋﾞﾋﾞﾋﾞﾋﾞﾋﾞwwwwww" Command="{Binding FireCSharpBeamCommand}"/>
                    <Separator/>
                    <MenuItem Name="MenuGCCollect" Header="ガベージコレクションを実行する" Command="{Binding GCCollectCommand}"/>
                    <MenuItem Name="MenuSetting" Header="設定" Click="MenuSetting_Click"/>
                    <MenuItem Name="MenuExit" Header="終了" Command="{Binding ApplicationExitCommand}"/>
                </MenuItem>
            </Menu>
        </Grid>

        <ToolBarTray Grid.Row="1" Background="Transparent">
            <ToolBar Name="ToolbarMain" VerticalAlignment="Center">
                <Menu Background="Transparent">
                    <MenuItem>
                        <MenuItem.Header>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBlock>Streaming API</TextBlock>
                                <TextBlock FontFamily="Marlett" VerticalAlignment="Center" Margin="4,0,0,0">6</TextBlock>
                            </StackPanel>
                        </MenuItem.Header>
                        <MenuItem Header="停止" Command="{Binding StopStreamingCommand}"/>
                        <MenuItem Header="再接続" Command="{Binding ReconnectStreamingCommand}"/>
                    </MenuItem>
                </Menu>
                <Button Name="ButtonSendClipImage" VerticalAlignment="Center" Click="ButtonSendClipImage_Click">クリップボードの画像を追加</Button>
            </ToolBar>
            <ToolBar Name="ToolBarJokes" VerticalAlignment="Center">
                <Menu Background="Transparent">
                    <MenuItem>
                        <MenuItem.Header>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Image Source="/Kbtter3;component/Resources/beam.png" Height="16" Width="16"/>
                                <TextBlock>他人の環境の改善のためにﾋﾞｰﾑを撃つ</TextBlock>
                                <TextBlock FontFamily="Marlett" VerticalAlignment="Center" Margin="4,0,0,0">6</TextBlock>
                            </StackPanel>
                        </MenuItem.Header>
                        <MenuItem Header="C#ﾋﾞｰﾑ" Command="{Binding FireCSharpBeamCommand}"/>
                        <MenuItem Header="WPFﾋﾞｰﾑ" Command="{Binding FireWpfBeamCommand}"/>
                        <MenuItem Header="XAMLﾋﾞｰﾑ" Command="{Binding FireXamlBeamCommand}"/>
                        <MenuItem Header="JSONﾋﾞｰﾑ" Command="{Binding FireJsonBeamCommand}"/>
                        <MenuItem Header="SQLiteﾋﾞｰﾑ" Command="{Binding FireSQLiteBeamCommand}"/>
                        <MenuItem Header="Livetﾋﾞｰﾑ" Command="{Binding FireLivetBeamCommand}"/>
                        <MenuItem Header="CoreTweetﾋﾞｰﾑ" Command="{Binding FireCoreTweetBeamCommand}"/>
                    </MenuItem>
                </Menu>
                <Button Command="{Binding SayDajareCommand}">おもしろいことをいう</Button>

            </ToolBar>
        </ToolBarTray>

        <Expander Name="ExpanderNewTweet" Grid.Row="2" Header="新しいツイート">
            <Grid VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="160"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition MinHeight="64"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <StackPanel Orientation="Horizontal" Grid.Row="0" Name="PanelNewTweetReply" Visibility="{Binding IsReplying, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    <Button Margin="4,0,0,0" Name="ButtonCancelReply" Width="16" Height="16" 
                            ToolTip="返信をキャンセル" Command="{Binding CancelReplyCommand}" Template="{StaticResource CancelButton}"/>
                    <TextBlock Margin="8,0,8,0" FontWeight="Bold">返信 :</TextBlock>
                    <TextBlock Margin="0,0,4,0" FontWeight="Bold" Text="{Binding ReplyingStatus.User.Name}"/>
                    <TextBlock Margin="0" Text="{Binding ReplyingStatusText}"/>
                </StackPanel>
                <TextBlock Grid.Row="1" Visibility="{Binding IsTextNoInput,Converter={StaticResource BooleanToVisibilityConverter}}" 
                           Text="つぶやく？" Margin="8,8,0,0" Panel.ZIndex="-1"/>
                <TextBox Grid.Row="1" Name="TextBoxNewTweetText" AcceptsReturn="True" Opacity="0.8" 
                             VerticalAlignment="Stretch"
                             VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
                             FontSize="14" Margin="4"
                         Text="{Binding UpdateStatusText,Delay=500,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True}"
                         Validation.ErrorTemplate="{StaticResource ErrorTemplate}"/>
                <DockPanel Grid.Column="1" Grid.Row="1">
                    <StackPanel DockPanel.Dock="Top">
                        <StackPanel Orientation="Horizontal" Margin="0">
                            <TextBlock Width="80" TextAlignment="Center" VerticalAlignment="Center">残り</TextBlock>
                            <TextBlock Name="TextBlockNewTweetRestLetters" FontSize="16" TextAlignment="Right" Text="{Binding UpdateStatusTextLength,UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <Button Name="ButtonNewTweetAddImage" Margin="4">
                            画像を追加
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <l:OpenFileDialogInteractionMessageAction>
                                        <l:DirectInteractionMessage CallbackCommand="{Binding AddMediaCommand,Mode=OneWay}">
                                            <l:OpeningFileSelectionMessage MultiSelect="False" Title="ツイートに追加する画像を選択"
                                                                           Filter="アップロード可能な画像(*.gif;*.jpeg;*.jpg;*.png)|*.gif;*.jpeg;*.jpg;*.png"/>
                                        </l:DirectInteractionMessage>
                                    </l:OpenFileDialogInteractionMessageAction>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                    </StackPanel>
                    <Button Name="ButtonNewTweetSend" Margin="4" DockPanel.Dock="Bottom" Command="{Binding UpdateStatusCommand}">つぶやく</Button>
                </DockPanel>
                <StackPanel Grid.Row="2" Name="PanelNewTweetImages" Orientation="Horizontal" Visibility="{Binding HasMedia,Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button Margin="4,0,0,0" Name="ButtonRemoveMedia" Width="16" Height="16" 
                            ToolTip="画像を添付しない" Command="{Binding RemoveMediaCommand}" Template="{StaticResource CancelButton}"/>
                    <TextBlock Margin="4,0,0,0" Text="{Binding MediaPath}"/>
                </StackPanel>
            </Grid>
        </Expander>

        <TabControl Name="TabControlMain" Grid.Row="4" Margin="0,2,0,0" 
                    Background="{StaticResource TwitterColorWhite}" Style="{StaticResource RoundTabControl}"
                    SelectionChanged="TabControlMain_SelectionChanged">
            <TabItem Name="TabTimeline" Style="{StaticResource RoundTabItem}">
                <TabItem.Header>
                    <TextBlock Name="TextBlockTimeline">
                        タイムライン<TextBlock Name="TextBlockUnreadStatuses"/>
                    </TextBlock>
                </TabItem.Header>
                <ListBox Name="ListBoxTimeline" HorizontalContentAlignment="Stretch"
                         ItemsSource="{Binding Path=Statuses}"
                         SelectedItem="{Binding Path=SelectedStatus}"
                         ScrollViewer.CanContentScroll="False"
                         />
            </TabItem>
            <TabItem Name="TabNotify" Style="{StaticResource RoundTabItem}">
                <TabItem.Header>
                    <TextBlock Name="TextBlockNotification">
                        通知<TextBlock Name="TextBlockUnreadNotifications"/>
                    </TextBlock>
                </TabItem.Header>
                <ListBox Name="ListBoxNotify" HorizontalContentAlignment="Stretch" 
                         ScrollViewer.CanContentScroll="False"
                         ScrollViewer.HorizontalScrollBarVisibility="Auto"/>
            </TabItem>
            <TabItem Name="TabSearch" Style="{StaticResource RoundTabItem}">
                <TabItem.Header>
                    <TextBlock>検索</TextBlock>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="80"/>
                        <ColumnDefinition Width="128"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="32"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBox Name="TextBoxSearch" Margin="4" Text="{Binding SearchText,UpdateSourceTrigger=PropertyChanged}"/>
                    <Button Name="ButtonSearch" Grid.Column="1" Margin="4" Command="{Binding SearchStatusesCommand}">検索</Button>
                    <Button Name="ButtonUserSearch" Grid.Column="2" Margin="4" Command="{Binding SearchUserCommand}">ユーザー検索</Button>
                    <ListView Name="ListViewSearchResult" Grid.Row="1" Grid.ColumnSpan="3" Margin="4"/>
                </Grid>
            </TabItem>
            <TabItem Name="TabDirectMessage" Style="{StaticResource RoundTabItem}">
                <TabItem.Header>
                    <TextBlock Name="TextBlockDirectMessage">
                        ダイレクトメッセージ<TextBlock Name="TextBlockUnreadDirectMessages"/>
                    </TextBlock>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="128" MaxWidth="500" Width="2*"/>
                        <ColumnDefinition Width="3*"/>
                    </Grid.ColumnDefinitions>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="32"/>
                        </Grid.RowDefinitions>

                        <ListBox Name="ListBoxDirectMessageTargets" Margin="4" ItemsSource="{Binding DirectMessages}"
                             SelectedItem="{Binding SendingDirectMessageTarget,Mode=OneWayToSource}">
                            <ListBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type vm:DirectMessageViewModel}">
                                    <StackPanel Orientation="Horizontal">
                                        <Image DataContext="{Binding TargetUserImageUri,Converter={StaticResource UriToBitmapImageAsyncConverter}}"
                                           Source="{Binding Result}" Width="48" Height="48" Margin="2"/>
                                        <StackPanel VerticalAlignment="Center">
                                            <TextBlock FontSize="16" Text="{Binding TargetUserName}"/>
                                            <TextBlock Text="{Binding TargetUserScreenName}"/>
                                        </StackPanel>
                                    </StackPanel>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                        <Grid Grid.Row="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="64"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Margin="4" ToolTip="新しくDMを送りたいユーザーのSNを入力して追加をクリック" 
                                     Text="{Binding NewDirectMessageTargetScreenName,UpdateSourceTrigger=PropertyChanged}"/>
                            <Button Grid.Column="1" Margin="4" Command="{Binding AddDirectMessageTargetCommand}">追加</Button>
                        </Grid>
                    </Grid>

                    <Grid Grid.Column="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="32" MaxHeight="32"/>
                            <RowDefinition Height="4*"/>
                            <RowDefinition MinHeight="96" MaxHeight="160" Height="*"/>
                        </Grid.RowDefinitions>

                        <Grid Grid.Column="0" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="32"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image Width="24" Height="24" Grid.Column="0"
                                   DataContext="{Binding ElementName=ListBoxDirectMessageTargets,Path=SelectedItem.TargetUserImageUri,Converter={StaticResource UriToBitmapImageAsyncConverter}}"
                                   Source="{Binding Result}"/>
                            <TextBlock Text="{Binding ElementName=ListBoxDirectMessageTargets,Path=SelectedItem.TargetUserScreenName}"
                                       FontSize="16" Grid.Column="1" VerticalAlignment="Center"/>
                        </Grid>
                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="32"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding ElementName=ListBoxDirectMessageTargets,Path=SelectedItem.MyScreenName}" 
                                       FontSize="16" Grid.Column="0" VerticalAlignment="Center" TextAlignment="Right"/>
                            <Image Width="24" Height="24" Grid.Column="1"
                                   DataContext="{Binding UserProfileImageUri,Converter={StaticResource UriToBitmapImageAsyncConverter}}"
                                   Source="{Binding Result}"/>
                        </Grid>

                        <ListView Grid.ColumnSpan="2" Grid.Row="1" Margin="4" 
                                  ScrollViewer.CanContentScroll="False" Name="ListViewDirectMessages"
                                  HorizontalContentAlignment="Stretch"
                                  ItemsSource="{Binding ElementName=ListBoxDirectMessageTargets,Path=SelectedItem.MergedMessage}">
                            <ListView.ItemTemplate>
                                <DataTemplate DataType="{x:Type vm:DirectMessageItemViewModel}">
                                    <StackPanel Margin="8" HorizontalAlignment="{Binding IsSent,Converter={StaticResource BooleanToHorizontalAlignmentConverter}}">
                                        <Border BorderBrush="{StaticResource TwitterColorGray}" BorderThickness="1" CornerRadius="6" MinWidth="200">
                                            <Grid>
                                                <Rectangle Panel.ZIndex="-100" Fill="{StaticResource Kbtter3GeneralGreen}"
                                                       Visibility="{Binding IsSent,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                <StackPanel>
                                                    <TextBlock Text="{Binding Text}" Margin="8" TextWrapping="Wrap"/>
                                                    <TextBlock Text="{Binding CreatedTimeText}" Margin="0,0,4,4" FontSize="10" Foreground="{StaticResource TwitterColorGray}"
                                                               HorizontalAlignment="{Binding IsSent,Converter={StaticResource BooleanToHorizontalAlignmentConverter}}"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </StackPanel>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                        <Grid VerticalAlignment="Stretch" Grid.Row="2" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="100"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition MinHeight="64"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="1" Visibility="{Binding IsDMTextNoInput,Converter={StaticResource BooleanToVisibilityConverter}}" 
                                       Text="送信内容" Margin="8,8,0,0" Panel.ZIndex="-1"/>
                            <TextBox Grid.Row="1" Name="TextBoxNewDMText" AcceptsReturn="True" Opacity="0.8" 
                                        VerticalAlignment="Stretch"
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
                                        FontSize="14" Margin="4"
                                        Text="{Binding DirectMessageText,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=True}"
                                        Validation.ErrorTemplate="{StaticResource ErrorTemplate}"/>
                            <DockPanel Grid.Column="1" Grid.Row="1">
                                <StackPanel DockPanel.Dock="Top">
                                    <StackPanel Orientation="Horizontal" Margin="0" HorizontalAlignment="Center">
                                        <TextBlock TextAlignment="Center" VerticalAlignment="Center">残り</TextBlock>
                                        <TextBlock Name="TextBlockNewDMRestLetters" FontSize="16" TextAlignment="Right" Text="{Binding DirectMessageTextLength,UpdateSourceTrigger=PropertyChanged}"/>
                                    </StackPanel>
                                    <Button Name="ButtonNewDMAddImage" Margin="4" IsEnabled="False">
                                        画像を追加
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <l:OpenFileDialogInteractionMessageAction>
                                                    <l:DirectInteractionMessage CallbackCommand="{Binding AddMediaCommand,Mode=OneWay}">
                                                        <l:OpeningFileSelectionMessage MultiSelect="False" Title="ツイートに追加する画像を選択"
                                                                           Filter="アップロード可能な画像(*.gif;*.jpeg;*.jpg;*.png)|*.gif;*.jpeg;*.jpg;*.png"/>
                                                    </l:DirectInteractionMessage>
                                                </l:OpenFileDialogInteractionMessageAction>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </Button>
                                </StackPanel>
                                <Button Name="ButtonNewDMSend" Margin="4" DockPanel.Dock="Bottom" Command="{Binding SendDirectMessageCommand}">送信</Button>
                            </DockPanel>
                            <StackPanel Grid.Row="2" Name="PanelNewDMImages" Orientation="Horizontal" Visibility="{Binding HasMedia,Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Button Margin="4,0,0,0" Name="ButtonRemoveDMMedia" Width="16" Height="16" 
                            ToolTip="画像を添付しない" Command="{Binding RemoveMediaCommand}" Template="{StaticResource CancelButton}"/>
                                <TextBlock Margin="4,0,0,0" Text="{Binding MediaPath}"/>
                            </StackPanel>
                        </Grid>
                    </Grid>
                </Grid>
            </TabItem>
        </TabControl>

        <StackPanel Grid.Row="5" Name="StackPanelPopupNotification">
            <StackPanel.Resources>
                <Style TargetType="StackPanel">
                    <Setter Property="Background" Value="Transparent"/>
                </Style>
            </StackPanel.Resources>
            <TextBlock Name="TextBlockPopupNotification" Text="{Binding NotificationText,Mode=OneWay,NotifyOnTargetUpdated=True}"
                       Margin="8,40,4,4" FontSize="16" TargetUpdated="TextBlockPopupNotification_TargetUpdated">
                <TextBlock.Resources>
                    <Storyboard Name="StoryboardPopupNotify" x:Key="Storyboard">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="StackPanelPopupNotification"
                                        Storyboard.TargetProperty="Background.Color"
                                        Duration="0:0:2" From="{StaticResource TwitterPrimaryColor}"
                                        To="Transparent" >
                                <ColorAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseIn"/>
                                </ColorAnimation.EasingFunction>
                            </ColorAnimation>
                        </Storyboard>
                        <Storyboard>
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="TextBlockPopupNotification"
                                                          Storyboard.TargetProperty="(TextBlock.Margin)"
                                                          Duration="0:0:3">
                                <LinearThicknessKeyFrame Value="8,40,4,4" KeyTime="0:0:0"/>
                                <EasingThicknessKeyFrame Value="8,4,4,4" KeyTime="0:0:0.500">
                                    <EasingThicknessKeyFrame.EasingFunction>
                                        <ElasticEase Springiness="4" EasingMode="EaseOut"/>
                                    </EasingThicknessKeyFrame.EasingFunction>
                                </EasingThicknessKeyFrame>
                                <LinearThicknessKeyFrame Value="8,4,4,4" KeyTime="0:0:2.750"/>
                                <EasingThicknessKeyFrame Value="8,40,4,4" KeyTime="0:0:3">
                                    <EasingThicknessKeyFrame.EasingFunction>
                                        <SineEase EasingMode="EaseInOut"/>
                                    </EasingThicknessKeyFrame.EasingFunction>
                                </EasingThicknessKeyFrame>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </Storyboard>
                </TextBlock.Resources>
            </TextBlock>
        </StackPanel>
    </Grid>
</Window>

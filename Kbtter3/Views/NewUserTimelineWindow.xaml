<Window x:Class="Kbtter3.Views.NewUserTimelineWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Kbtter3.Views"
        xmlns:vm="clr-namespace:Kbtter3.ViewModels"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        Title="新規ユーザー定義タイムライン" Height="320" Width="400" ResizeMode="NoResize"
        mc:Ignorable="d"
        d:DataContext="{d:DesignData /Views/DesignData/NewUserTimeline.xaml}">

    <Window.Resources>
        <ResourceDictionary Source="KbtterResource.xaml"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="InformationNUT">
            <l:InformationDialogInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="Close">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>
        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid Background="{StaticResource TwitterColorWhite}">
        <Grid.ColumnDefinitions>

        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="32"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="48"/>
        </Grid.RowDefinitions>
        <TextBlock TextAlignment="Center" FontSize="20" VerticalAlignment="Center">新規ユーザー定義タイムライン</TextBlock>
        <GroupBox Grid.Row="1" Margin="4" Header="以下のクエリの・・・">
            <StackPanel>
                <RadioButton Margin="4" IsChecked="{Binding ExtractTrueStatus}">条件をみたすものを抽出</RadioButton>
                <RadioButton Margin="4" IsChecked="{Binding ExtractFalseStatus}">条件をみたさないものを抽出</RadioButton>
            </StackPanel>
        </GroupBox>
        <TextBox Grid.Row="2" Margin="8" Name="TextBoxQuery" 
                 Text="{Binding QueryText,UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True"
                 FontFamily="Courier New" FontSize="14" />
        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button Name="ButtonCancel" Margin="4">キャンセル</Button>
            <Button Name="ButtonCreate" Margin="4" Grid.Column="1" Command="{Binding CreateCommand}">作成</Button>
        </Grid>
    </Grid>
</Window>

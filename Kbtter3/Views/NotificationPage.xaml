<Page x:Class="Kbtter3.Views.NotificationPage"
      x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Kbtter3.Views"
        xmlns:vm="clr-namespace:Kbtter3.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        d:DataContext="{d:DesignData /Views/DesignData/Notification.xaml}"
        Title="NotificationPage" d:DesignHeight="80" d:DesignWidth="400" Loaded="Page_Loaded"
        ContextMenuService.ShowOnDisabled="True" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Page.Resources>
        <ResourceDictionary Source="KbtterResource.xaml"/>
    </Page.Resources>

    <Page.ContextMenu>
        <ContextMenu>
            <MenuItem Header="リプライ" Visibility="{Binding IsReply,Converter={StaticResource BooleanToVisibilityConverter}}">
                <MenuItem Header="返信" Command="{Binding ReplyStatusViewModel.ReplyToCommand}"/>
                <MenuItem Header="お気に入り" IsCheckable="True" IsChecked="{Binding ReplyStatusViewModel.IsFavorited,Mode=TwoWay}"/>
                <MenuItem Header="リツイート" IsCheckable="True" IsChecked="{Binding ReplyStatusViewModel.IsRetweeted,Mode=TwoWay}"/>
            </MenuItem>
        </ContextMenu>
    </Page.ContextMenu>

    <Grid Background="{StaticResource Kbtter3StatusBackColor}">
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="24"/>
            <ColumnDefinition Width="40"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Rectangle Name="RectangleReplyToMeBackground" Grid.ColumnSpan="3" Grid.RowSpan="2" 
                   Fill="{StaticResource Kbtter3ReplyBackColor}" Panel.ZIndex="-100" 
                   Visibility="{Binding ReplyStatusViewModel.IsReplyToMe, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        <Image Width="16" Height="16" Source="{Binding IconUri,Converter={StaticResource UriToBitmapImageConverter}}"/>

        <Image Width="32" Height="32" Grid.Column="1" Source="{Binding UserImageUri,Converter={StaticResource UriToBitmapImageConverter}}">
        </Image>
        <StackPanel Grid.Column="2" VerticalAlignment="Center">
            <TextBlock Text="{Binding Description}"/>
            <TextBlock Foreground="Gray" Text="{Binding NotificationTime}"/>
        </StackPanel>
        <TextBlock Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" Text="{Binding ContentText}"/>
    </Grid>
</Page>
